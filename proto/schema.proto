syntax = "proto3";

package proto;

option go_package = "github.com/teamkeel/proto";

import "google/protobuf/wrappers.proto";

message Schema {
    repeated Model models = 1;
    repeated Role roles = 2;
    repeated Api apis = 3;
    repeated Enum enums = 4;
    repeated EnvironmentVariable environment_variables = 5;
    repeated Message messages = 6;
}

message Model {
    // The name of the model. Must be in PascalCase and be unique within the schema.
    string name = 1;

    // The fields this model contains
    repeated Field fields = 2;

    // The operations this model defines. Contains both operations that will be auto
    // generated and also custom functions
    repeated Operation operations = 3;

    repeated PermissionRule permissions = 4;
}

message Field {
    // The name of the model this field belongs to.
    string model_name = 1;

    // The name of the field. Must be in lowerCamelCase and be unique within the model.
    string name = 2;

    // Info regarding the type of this field
    TypeInfo type = 3;

    // If true then this field is allowed to be null
    bool optional = 4;

    // If true then this field will have a unique constraint added to it meaning
    // a given value can only exist in a single row.
    // Cannot be true if `type.repeated` is true
    bool unique = 5;

    // If set then this field is part of a compount unique constraint with the
    // fields listed. The fields must be part of the same model and they must
    // list this field in their unique_with value.
    repeated string unique_with = 8;

    // If true then this field will be set as the primary key for the parent model
    bool primary_key = 7;

    // If this field is of type TYPE_MODEL then this field indicates which field on _this_
    // model is the foriegn key. This field should always be populated on the many side of a
    // one-to-many relationship and on the unique side of a one-to-one.
    google.protobuf.StringValue foreign_key_field_name = 10;

    // This describes how the default value of this field should be created
    DefaultValue default_value = 9;

    // This only applies to the foreign key fields that we auto inject.
    // If it is non null it *defines* this field as being a foreign key field,
    // and carries corresponding metadata.
    ForeignKeyInfo foreign_key_info = 11;
}

message ForeignKeyInfo {
    string related_model_name = 1;
    string related_model_field = 2;
}

message DefaultValue {
    // If true then a "zero" value is used for the field, for example
    // a string has a zero value of "" and a date has a zero value of
    // today
    bool use_zero_value = 1;

    // This can be used to explicitly set the default value
    Expression expression = 2;
}

message Operation {
    // The name of the model this operation belongs to.
    string model_name = 1;

    // The name of the operation. Must be in lowerCamelCase and be unique across all operations
    // across all models within the schema. This is because in both RPC and GraphQL operations
    // are top-level and so two different models can't both define an operation with the same name.
    string name = 2;

    // The type of this operation.
    OperationType type = 3;

    // Whether this operation will be auto-generated by Keel or implemented with a custom function.
    OperationImplementation implementation = 4;

    // The inputs this operation accepts.
    repeated OperationInput inputs = 5;

    // A list of permission rules to apply to this operation
    repeated PermissionRule permissions = 6;

    // A list of assignment expression to be executed as part of this operation.
    // Only valid in `type` is OPERATION_TYPE_CREATE or OPERATION_TYPE_UPDATE
    repeated Expression set_expressions = 7;

    // A list of logical expressions to be applied to the database query being
    // executed as part of the operation.
    // Not valid if `type` is OPERATION_TYPE_CREATE
    // If there are multiple entries in this field they are AND'd.
    repeated Expression where_expressions = 8;

    // A list of expressions that perform some kind of validation (likely on the inputs)
    repeated Expression validation_expressions = 9;

    // For operation types which have a non-uniform response and whose outputs defined in code.
    repeated OperationOutput outputs = 10;

    // The name of the input message type for this operation.
    string input_message_name = 11;

    // The name of the response message type for this operation when not a built-in action. This is because
    // built-in action responses are determined by the operation type (get, list, create, update, delete).
    string response_message_name = 12;
}

message OperationInput {
    // Name of the parent model
    string model_name = 1;

    // Name of the parent operation
    string operation_name = 2;

    // Name of the input. Must be lowerCamelCase and unique within the parent operation.
    string name = 3;

    // The type of this input. 
    TypeInfo type = 4;

    // Set to true if this input field is optional
    bool optional = 6;

    // Indicates whether the input is used for reading or writing data
    InputMode mode = 7;

    // For operations whose implementation is set to OPERATION_IMPLEMENTATION_AUTO
    // this field can be set to a path, from the current model, to a field that should
    // be read from or written to, depending on `mode`, automatically by the runtime.
    // As an example if the parent model had a field called `item` which was a relationship to
    // an `Item` model which itself had a field called `price`, and this input wanted to filter
    // on the item price, then the value of `target` would be ["item", "price"]
    repeated string target = 9;

    // For inputs of type TYPE_OBJECT
    repeated OperationInput inputs = 10;
}

message OperationOutput {
    // Name of the parent model
    string model_name = 1;

    // Name of the parent operation
    string operation_name = 2;

    // Name of the output. 
    string name = 3;

    // The type of this output. 
    TypeInfo type = 4;
}

enum InputMode {
    INPUT_MODE_UNKNOWN = 0;

    // Read inputs are used for filtering results in get, list, and update actions
    INPUT_MODE_READ = 1;

    // Write inputs are used to set fields on a model in a create or update action
    INPUT_MODE_WRITE = 2;
}

message Role {
    // The name of the role
    string name = 1;

    // A list of domains to match for this role e.g. myorg.com
    repeated string domains = 2;

    // A list of specific email addresses to match for this role eg. sarah@myorg.com
    repeated string emails = 3;
}

message PermissionRule {
    // Name of the model this permission rule applies to
    string model_name = 1;

    // Name of the specific operation this permission rule applies to.
    // If this field is populated then `operations_types` is ignored.
    google.protobuf.StringValue operation_name = 2;

    // A name of a Role that has been defined in the schema.
    // Cannot be provided if `expression` is provided.
    repeated string role_names = 3;

    // An expression to evaluate at runtime.
    // Cannot be provided if `role_name` is provided.
    Expression expression = 4;

    // A list of operation types that this permission rule applies to
    // Should not be set if `operation_name` is provided.
    repeated OperationType operations_types = 5;
}

message Expression {
    string source = 1;
}

message Api {
    string name = 1;
    repeated ApiModel api_models = 3;
}

message ApiModel {
    string model_name = 1;
}

message Enum {
    string name = 1;
    repeated EnumValue values = 2;
}

message EnumValue {
    string name = 1;
}

message Message {
    // Name of the input or response message. Either generated from built-in 
    // actions, hard-coded into the runtime (e.g. AuthenticateResponseMessage), 
    // or specified in the schema using the message keyword.
    string name = 1;

    // The input or response fields for this message.
    repeated MessageField fields = 2;
}

message MessageField {
    // Name of the parent message.
    string message_name = 1;

    // Name of the field.
    string name = 2;

    // The type of this field. 
    TypeInfo type = 3;

    // Set to true if this field is optional.
    bool optional = 4;

    // Only valid for implicit inputs on built-in actions (OPERATION_IMPLEMENTATION_AUTO)
    // This field can be set to a path, from the current model, to a field that should
    // be read from or written to automatically by the runtime.
    // As an example if the parent model had a field called `item` which was a relationship to
    // an `Item` model which itself had a field called `price`, and this input wanted to filter
    // on the item price, then the value of `target` would be ["item", "price"].
    repeated string target = 5;
}

message TypeInfo {
    // The type of the field.
    Type type = 1;

    // If `type` is set to TYPE_ENUM then this value is the name of the
    // the enum that the type refers to.
    google.protobuf.StringValue enum_name = 2;

    // If this field is set then this type is referring to another model.
    // In the case of TYPE_MODEL this type _is_ the model named here.
    // In the case of other types e.g. TYPE_ID this type is referencing a field
    // on the model named here, and the specific field being referenced is indicated
    // by `field_name`.
    google.protobuf.StringValue model_name = 3;

    // This field indicates which field on `model_name` this type is referencing.
    // This field should only be set if `model_name` is set.
    google.protobuf.StringValue field_name = 5;

    // Only valid within a Message
    google.protobuf.StringValue message_name = 6;

    // If true then is type is an array of it's `type`
    bool repeated = 4;
}

message EnvironmentVariable {
  string name = 1;
  bool required = 2;
}

enum OperationInputType {
    OPERATION_INPUT_TYPE_UNKNOWN = 0;

    // Means the input maps directly to a field on a model
    OPERATION_INPUT_TYPE_FIELD = 1;

    OPERATION_INPUT_TYPE_STRING = 2;
    OPERATION_INPUT_TYPE_BOOL = 3;
    // etc...
}

// Describes where and by which party the implementation for an operation is provided.
enum OperationImplementation {
    OPERATION_IMPLEMENTATION_UNKNOWN = 0;

    // Auto means the implementation of the operation is provided by Keel and can be 
    // either generated (such as with operations on models like GET and CREATE) or is built-in (with 
    // operations such as authentication).
    OPERATION_IMPLEMENTATION_AUTO = 1;

    // Custom means the implementation of the operation is provided via custom code.
    // The code itself is not represented in this proto schema. 
    OPERATION_IMPLEMENTATION_CUSTOM = 2;
}

// Describes the behaviour of an operation and a preordained input and output specification.
enum OperationType {
    OPERATION_TYPE_UNKNOWN = 0;
    
    // Creates a new record and returns it.
    OPERATION_TYPE_CREATE = 1;

    // Returns a single record by looking up on a unique field.
    OPERATION_TYPE_GET = 2;

    // Lists records optionally filtering on certain fields. The response would be a
    // an object that supports pagination functionality and contains a "page" of results.
    OPERATION_TYPE_LIST = 3;

    // Update a single record by providing a unique lookup and some fields to update.
    // The resulting record is returned.
    OPERATION_TYPE_UPDATE = 4;

    // Delete a record and returns it's ID.
    OPERATION_TYPE_DELETE = 5;

    // Authenticate an identity.
    OPERATION_TYPE_AUTHENTICATE = 6;
}

enum Type {
    TYPE_UNKNOWN = 0;
    TYPE_STRING = 1;
    TYPE_BOOL = 2;
    TYPE_INT = 3;
    TYPE_TIMESTAMP = 4;
    TYPE_DATE = 5;
    TYPE_ID = 6;
    TYPE_MODEL = 7;
    TYPE_CURRENCY = 8;
    TYPE_DATETIME = 9;
    TYPE_ENUM = 10;
    TYPE_IMAGE = 12;
    TYPE_OBJECT = 13;
    // Used for sensitive data. Encrypted at rest, decrypted on read.
    TYPE_SECRET = 14;
    // Used for hashing passwords and passcodes with the intention to verify admission.
    TYPE_PASSWORD = 15;
    TYPE_MESSAGE = 16;
}