model Post {
    fields {
        title Text?
        views Number?
        active Boolean?
        type PostType?
        identity Identity?

        titlePermissionMatch Text @default("hello")
        viewsPermissionMatch Number @default(5)
        activePermissionMatch Boolean @default(true)
        typePermissionMatch PostType @default(PostType.Technical)
    }

    operations {
        create createWithTextPermissionLiteral() with (title) {
            @permission(expression: post.title == "hello")
        }

        create createWithNumberPermissioLiteral() with (views) {
            @permission(expression: post.views == 5)
        }

        create createWithBooleanPermissionLiteral() with (active) {
            @permission(expression: post.active == true)
        }

        create createWithEnumPermissionLiteral() with (type) {
            @permission(expression: post.type == PostType.Technical)
        }

        create createWithTextPermissionFromField() with (title) {
            @permission(expression: post.title == post.titlePermissionMatch)
        }

        create createWithNumberPermissionFromField() with (views) {
            @permission(expression: post.views == post.viewsPermissionMatch)
        }

        create createWithBooleanPermissionFromField() with (active) {
            @permission(expression: post.active == post.activePermissionMatch)
        }

        // todo: https://linear.app/keel/issue/DEV-202/enum-conditional-expressions-with-field-name
        // create createWithEnumPermissionFromField() with (type) {
        //     @permission(expression: post.type == post.typePermissionMatch)
        // }

        create createWithIdentityRequiresSameIdentity() {
            @set(post.identity = ctx.identity)
            @permission(expression: post.identity == ctx.identity)
        }

        create createWithTrueValuePermission() with (title) {
            @permission(expression: true)
        }

        create createWithMultipleOrPermissions() with (title, views, active) {
            @permission(expression: post.title == post.titlePermissionMatch)
            @permission(expression: post.views == post.viewsPermissionMatch)
            @permission(expression: post.active == post.activePermissionMatch)
        }
    }
}

enum PostType {
    Technical
    Lifestyle
    Food
}

api Web {
    @graphql
    models {
        Post
    }
}
