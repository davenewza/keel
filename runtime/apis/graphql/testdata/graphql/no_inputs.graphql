type Query {
  _health: Boolean
  getBeatle: Beatle
  listBeatles(input: ListBeatlesInput): BeatleConnection!
}

type Mutation {
  authenticate(input: AuthenticateInput!): AuthenticateResponse
  createBeatle: Beatle!
  deleteBeatle: DeleteResponse
  requestPasswordReset(input: RequestPasswordResetInput!): RequestPasswordResetResponse
  resetPassword(input: ResetPasswordInput!): ResetPasswordResponse
  switchBeatle: Beatle!
}

input AuthenticateInput {
  createIfNotExists: Boolean
  emailPassword: EmailPasswordInput!
}

input EmailPasswordInput {
  email: String!
  password: String!
}

input ListBeatlesInput {
  after: String
  before: String
  first: Int
  last: Int
}

input RequestPasswordResetInput {
  email: String!
  redirectUrl: String!
}

input ResetPasswordInput {
  password: String!
  token: String!
}

type AuthenticateResponse {
  identityCreated: Boolean!
  token: String!
}

type Beatle {
  code: String!
  createdAt: Timestamp!
  id: ID!
  identity: Identity
  identityId: ID
  name: String!
  updatedAt: Timestamp!
}

type BeatleConnection {
  edges: [BeatleEdge!]!
  pageInfo: PageInfo!
}

type BeatleEdge {
  node: Beatle!
}

type DeleteResponse {
  success: Boolean!
}

type Identity {
  createdAt: Timestamp!
  email: String
  emailVerified: Boolean!
  externalId: String
  id: ID!
  issuer: String
  updatedAt: Timestamp!
}

type PageInfo {
  count: Int!
  endCursor: String!
  hasNextPage: Boolean!
  startCursor: String!
  totalCount: Int!
}

type RequestPasswordResetResponse {
  success: Boolean
}

type ResetPasswordResponse {
  success: Boolean
}

type Timestamp {
  formatted(format: String!): String!
  fromNow: String!
  iso8601: String!
  seconds: Int!
}

scalar Any

scalar ISO8601
