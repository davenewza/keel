import {
  QueryConstraints,
  ChainableQuery,
  Query,
  FunctionError,
  FunctionCreateResponse,
  FunctionGetResponse,
  FunctionDeleteResponse,
  FunctionListResponse,
  FunctionUpdateResponse,
  FunctionAuthenticateResponse
} from '@teamkeel/functions-runtime';

export declare type ID = string
export declare type Timestamp = string
{{- range .Models }}
export interface {{ .Name }} {
  {{- range .Fields }}
  {{ .Name }}{{ if .IsOptional }}?{{end}}: {{ .Type }}
  {{- end }}
}
export declare type {{ .Name }}Query = {
  {{- range .Fields }}
  {{ .Name }}?: QueryConstraints.{{ .ConstraintType }}
  {{- end }}
}
export declare type {{ .Name }}UniqueFields = {
  {{- range .UniqueFields }}
  {{ .Name }}?: QueryConstraints.{{ .ConstraintType }}
  {{- end }}
}
{{- end }}

{{- range .Enums }}
export declare enum {{ .Name }} {
  {{- range .Values }}
  {{ .Label }} = "{{ .Label }}",
  {{- end }}
}
{{- end }}

{{- range .Actions }}
{{- if .IsCustom }}
export declare type {{ .Name }}ReturnType = Promise<Function{{ .OperationType }}Response<{{ .ModelName }}>>;
export declare type {{ .Name }}CallbackFunction = (inputs: {{ .Name }}Input, api: KeelApi) => {{ .Name }}ReturnType;
export declare const {{ .Name }}: (callback: {{ .Name }}CallbackFunction) => (inputs: {{ .Name }}Input, api: KeelApi) => {{ .Name }}ReturnType
{{- end }}

export interface {{ .Name }}Input {
  {{- if eq .OperationType "Update" }}
  where: {
  {{- range .ReadInputs }}
    {{ .Label }}{{ if .IsOptional }}?{{end}}: {{ .Type }}
  {{- end }}
  }

  values: {
  {{- range .WriteInputs }}
    {{ .Label }}{{ if .IsOptional }}?{{end}}: {{ .Type }}
  {{- end }}
  }
  {{- else if eq .OperationType "List" }}
  where: {
  {{- range .ReadInputs }}
    {{ .Label }}{{ if .IsOptional }}?{{end}}: {{ .ConstraintType }}
  {{- end }}
  }
  {{- else if eq .OperationType "Create" }}
  {{- range .WriteInputs }}
  {{ .Label }}{{ if .IsOptional }}?{{end}}: {{ .Type }}
  {{- end }}
  {{- else if eq .OperationType "Get" }}
  {{- range .ReadInputs }}
  {{ .Label }}{{ if .IsOptional }}?{{end}}: {{ .Type }}
  {{- end }}
  {{- else if eq .OperationType "Delete" }}
  {{- range .ReadInputs }}
  {{ .Label }}{{ if .IsOptional }}?{{end}}: {{ .Type }}
  {{- end }}
  {{- else if eq .OperationType "Authenticate" }}
  {{- range .Inputs }}
  {{ .Label }}{{ if .IsOptional }}?{{end}}: {{ .Type }}
  {{- end }}
  {{- end }}
}
{{- end }}
{{- range .Models }}
export declare class {{ .ApiName }} {
  private readonly db : Query<{{ .Name }}>;
  constructor();
  create: (inputs: Partial<Omit<{{ .Name }}, "id" | "createdAt" | "updatedAt">>) => Promise<FunctionCreateResponse<{{ .Name }}>>;
  where: (conditions: {{ .Name }}Query) => ChainableQuery<{{ .Name }}>;
  delete: (id: string) => Promise<FunctionDeleteResponse<{{ .Name }}>>;
  findOne: (query: {{ .Name }}UniqueFields) => Promise<FunctionGetResponse<{{ .Name }}>>;
  update: (inputs: Partial<Omit<{{ .Name }}, "id" | "createdAt" | "updatedAt">>) => Promise<FunctionUpdateResponse<{{ .Name }}>>;
  findMany: (query: {{ .Name }}Query) => Promise<FunctionListResponse<{{ .Name }}>>;
}
{{- end }}
export declare type KeelApi = {
  models: {
    {{- range .Models }}
    {{ .NameLowerCamel }}: {{ .ApiName }},
    {{- end}}
  }
}
export declare const api : KeelApi