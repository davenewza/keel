model Thing {
    fields {
        optionalText Text?
        requiredText Text @default("hello")
        optionalNumber Number?
        requiredNumber Number @default(1)
        optionalDecimal Decimal?
        requiredDecimal Decimal @default(1.0)
        optionalBoolean Boolean?
        requiredBoolean Boolean @default(false)
        optionalDuration Duration?
        requiredDuration Duration @default("P1D")
        optionalEnum ThingType?
        requiredEnum ThingType @default(ThingType.TypeOne)
        optionalParent Parent?
    }

    actions {
        create createTextOnOptional() {
            @set(thing.optionalText = "goodbye")
        }
        create createNullTextOnOptional() {
            @set(thing.optionalText = null)
        }
        create createTextOnRequired() {
            @set(thing.requiredText = "goodbye")
        }
        create createTextFromExplicitInput() with (explText: Text) {
            @set(thing.requiredText = explText)
        }
        create createTextFromImplicitInput() with (requiredText) {
            @set(thing.optionalText = requiredText)
        }
        create createNumberOnOptional() {
            @set(thing.optionalNumber = 5)
        }
        create createNullNumberOnOptional() {
            @set(thing.optionalNumber = null)
        }
        create createNumberOnRequired() {
            @set(thing.requiredNumber = 5)
        }
        create createNumberFromExplicitInput() with (explNumber: Number) {
            @set(thing.requiredNumber = explNumber)
        }
        create createNumberFromImplicitInput() with (requiredNumber) {
            @set(thing.optionalNumber = requiredNumber)
        }
        create createDecimalOnOptional() {
            @set(thing.optionalDecimal = 1.5)
        }
        create createNullDecimalOnOptional() {
            @set(thing.optionalDecimal = null)
        }
        create createDecimalOnRequired() {
            @set(thing.requiredDecimal = 1.5)
        }
        create createDecimalFromExplicitInput() with (explDecimal: Decimal) {
            @set(thing.requiredDecimal = explDecimal)
        }
        create createDecimalFromImplicitInput() with (requiredDecimal) {
            @set(thing.optionalDecimal = requiredDecimal)
        }
        create createBooleanOnOptional() {
            @set(thing.optionalBoolean = true)
        }
        create createNullBooleanOnOptional() {
            @set(thing.optionalBoolean = null)
        }
        create createBooleanOnRequired() {
            @set(thing.requiredBoolean = true)
        }
        create createBooleanFromExplicitInput() with (explBoolean: Boolean) {
            @set(thing.requiredBoolean = explBoolean)
        }
        create createBooleanFromImplicitInput() with (requiredBoolean) {
            @set(thing.optionalBoolean = requiredBoolean)
        }
        create createDurationOnOptional() {
            @set(thing.optionalDuration = "P1D")
        }
        create createNullDurationOnOptional() {
            @set(thing.optionalDuration = null)
        }
        create createDurationOnRequired() {
            @set(thing.requiredDuration = "P1D")
        }
        create createDurationFromExplicitInput() with (explDuration: Duration) {
            @set(thing.requiredDuration = explDuration)
        }
        create createDurationFromImplicitInput() with (requiredDuration) {
            @set(thing.optionalDuration = requiredDuration)
        }
        create createEnumOnOptional() {
            @set(thing.optionalEnum = ThingType.TypeTwo)
        }
        create createNullEnumOnOptional() {
            @set(thing.optionalEnum = null)
        }
        create createEnumOnRequired() {
            @set(thing.requiredEnum = ThingType.TypeTwo)
        }
        create createEnumFromExplicitInput() with (explEnum: ThingType) {
            @set(thing.requiredEnum = explEnum)
        }
        create createEnumFromImplicitInput() with (requiredEnum) {
            @set(thing.optionalEnum = requiredEnum)
        }
        create createParentFromExplicitInput() with (explParent: ID) {
            @set(thing.optionalParentId = explParent)
        }
        create createNullParentId() {
            @set(thing.optionalParentId = null)
        }
        create createNullParent() {
            @set(thing.optionalParent = null)
        }
    }

    @permission(
        expression: true,
        actions: [create, get, list, update, delete]
    )
}

enum ThingType {
    TypeOne
    TypeTwo
}

model Parent {
    fields {
        name Text
    }
}

api Test {
    models {
        Thing
        Parent
    }
}
