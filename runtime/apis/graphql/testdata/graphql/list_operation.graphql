type Query {
  getPerson(input: getPerson_input!): Person
  listPeople(input: listPeople_input!): Person_connection!
}

type Mutation {
  authenticate(input: authenticate_input!): authenticate_response
}

input DateInput {
  day: Int!
  month: Int!
  year: Int!
}

input DateQuery_input {
  after: DateInput
  before: DateInput
  equals: DateInput
  onOrAfter: DateInput
  onOrBefore: DateInput
}

input EmailPassword_input {
  email: String!
  password: String!
}

input OccupationQuery_input {
  equals: Occupation
  oneOf: [Occupation]
}

input StringQuery_input {
  contains: String
  endsWith: String
  equals: String
  oneOf: [String]
  startsWith: String
}

input authenticate_input {
  createIfNotExists: Boolean
  emailPassword: EmailPassword_input!
}

input getPerson_input {
  id: ID!
}

input listPeople_input {
  after: String
  before: String
  first: Int
  last: Int
  where: listPeople_where!
}

input listPeople_where {
  dateOfBirth: DateQuery_input!
  name: StringQuery_input!
  occupation: OccupationQuery_input!
}

type Date {
  day: Int!
  formatted(format: String!): String!
  month: Int!
  year: Int!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  startCursor: String!
  totalCount: Int!
}

type Person {
  createdAt: Timestamp!
  dateOfBirth: Date!
  id: ID!
  name: String!
  occupation: Occupation!
  updatedAt: Timestamp!
}

type Person_connection {
  edges: [Person_edge!]!
  pageInfo: PageInfo!
}

type Person_edge {
  node: Person!
}

type Timestamp {
  day: Int!
  formatted(format: String!): String!
  fromNow: String!
  month: Int!
  seconds: Int!
  year: Int!
}

type authenticate_response {
  identityCreated: Boolean!
  token: String!
}

enum Occupation {
  Astronaut
  Doctor
  Teacher
}
