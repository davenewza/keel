type Query {
  getOrder(input: GetOrderInput!): Order
}

type Mutation {
  authenticate(input: AuthenticateInput!): AuthenticateResponse
}

input AuthenticateInput {
  createIfNotExists: Boolean
  emailPassword: EmailPasswordInput!
}

input EmailPasswordInput {
  email: String!
  password: String!
}

input GetOrderInput {
  id: ID!
}

type AuthenticateResponse {
  identityCreated: Boolean!
  token: String!
}

type Order {
  createdAt: Timestamp!
  id: ID!
  items(after: String, before: String, first: Int, last: Int): OrderItemConnection!
  updatedAt: Timestamp!
}

type OrderItem {
  createdAt: Timestamp!
  id: ID!
  order: Order!
  orderId: ID!
  price: Int!
  updatedAt: Timestamp!
}

type OrderItemConnection {
  edges: [OrderItemEdge!]!
  pageInfo: PageInfo!
}

type OrderItemEdge {
  node: OrderItem!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  startCursor: String!
  totalCount: Int!
}

type Timestamp {
  day: Int!
  formatted(format: String!): String!
  fromNow: String!
  month: Int!
  seconds: Int!
  year: Int!
}
