model Post {
    fields {
        title Text?
        views Number?
        identity Identity?
    }

    operations {
        create create() with (title, views) 
        get get(id)
        update update(id) with (title)
        delete delete(id)
    }

    @permission(
        expression: post.title == "hello",
        actions: [create, get, update]
    )

    @permission(
        expression: post.views == 5,
        actions: [get]
    )

    @permission(
        expression: true,
        actions: [delete]
    )
}

model ModelWithExpressions {
    fields {
        title Text?
        views Number?
        isActive Boolean?
        option Options?
    }

    operations {
        create textsFailedExpressions() with (title, explTitle: Text) {
            @permission(expression: "hello" == "goodbye")
            @permission(expression: "hello" != "hello")
            @permission(expression: "hello" != title)
            @permission(expression: "hello" != explTitle)
        }

        create numbersFailedExpressions() with (views, explViews: Number) {
            @permission(expression: 2 == 1)
            @permission(expression: 1 != 1)
            @permission(expression: 1 > 1)
            @permission(expression: 1 < 1)
            @permission(expression: 1 >= 2)
            @permission(expression: 2 <= 1)
            @permission(expression: 1 == views)
            @permission(expression: 2 != views)
            @permission(expression: 1 > views)
            @permission(expression: 3 < views)
            @permission(expression: 1 >= views)
            @permission(expression: 3 <= views)
            @permission(expression: 1 == explViews)
            @permission(expression: 2 != explViews)
            @permission(expression: 1 > explViews)
            @permission(expression: 3 < explViews)
            @permission(expression: 1 >= explViews)
            @permission(expression: 3 <= explViews)
        }

        create booleansFailedExpressions() with (isActive) {
            @permission(expression: true == false)
            @permission(expression: true != true)
            @permission(expression: false)
            // todo: https://linear.app/keel/issue/DEV-215/nil-ref-exception-with-createisactive-explisactive-boolean
            //@permission(expression: false != isActive)
            //@permission(expression: false != explIsActive)
        }

        create enumFailedExpressions() with (option) {
            @permission(expression: Options.One == Options.Two)
            @permission(expression: Options.One != Options.One)
            @permission(expression: Options.One != option)
            // todo: https://linear.app/keel/issue/DEV-216/enum-as-explicit-input-action-inputs-must-be-one-of-the-fields-defined
            //@permission(expression: Options.One != explOption)
        }
    }
}

enum Options {
    One
    Two
}

api Web {
    @graphql
    models {
        Post
    }
}
