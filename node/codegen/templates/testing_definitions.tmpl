import * as SDK from '@teamkeel/sdk';
import * as ReturnTypes from '@teamkeel/functions-runtime/returnTypes';
import { ActionExecutor } from '@teamkeel/functions-testing';

declare class ActionsWithIdentity {
  private identity : SDK.Identity;

  constructor(identity: SDK.Identity | undefined)

  {{- range .Actions }}
  {{ .NameLowerCamel }}: (payload) => ReturnTypes.Function{{ .OperationType }}Response<SDK.{{ .ModelName }}>
  {{- end }}
}

export declare class Actions {
  withIdentity: (identity: SDK.Identity | undefined) => ActionsWithIdentity
  
  {{- range .Actions }}
  {{ .NameLowerCamel }}: (payload) => ReturnTypes.Function{{ .OperationType }}Response<SDK.{{ .ModelName }}>
  {{- end }}
}
export declare const actions : Actions;
{{- range .Models }}
export declare class {{ .ApiName }} {
  private query : Query<SDK.{{ .Name }}>;
  constructor();
  create: (inputs: Partial<Omit<SDK.{{ .Name }}, "id" | "createdAt" | "updatedAt">>) => Promise<ReturnTypes.FunctionCreateResponse<SDK.{{ .Name }}>>
  where: (conditions: SDK.{{ .Name }}Query) => ChainableQuery<SDK.{{ .Name }}>
  delete: (id: string) => Promise<ReturnTypes.FunctionDeleteResponse<SDK.{{ .Name }}>>
  findOne: (query: SDK.{{ .Name }}) => Promise<ReturnTypes.FunctionGetResponse<SDK.{{ .Name }}>>
  update: (inputs: Partial<Omit<SDK.{{ .Name }}, "id" | "createdAt" | "updatedAt">>) => Promise<ReturnTypes.FunctionUpdateResponse<SDK.{{ .Name }}>>
  findMany: (query: SDK.{{ .Name }}Query) => Promise<ReturnTypes.FunctionListResponse<SDK.{{ .Name }}>>
}
export declare const {{ .Name }} : {{ .ApiName }};
{{- end }}