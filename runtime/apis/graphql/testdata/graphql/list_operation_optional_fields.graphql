type Query {
  _health: Boolean
  getPerson(input: GetPersonInput!): Person
  listPeople(input: ListPeopleInput!): PersonConnection!
  listPeopleAllOptional(input: ListPeopleAllOptionalInput): PersonConnection!
}

input DateQueryInput {
  after: ISO8601
  before: ISO8601
  equals: ISO8601
  notEquals: ISO8601
  onOrAfter: ISO8601
  onOrBefore: ISO8601
}

input GetPersonInput {
  id: ID!
}

input ListPeopleAllOptionalInput {
  after: String
  before: String
  first: Int
  last: Int
  where: ListPeopleAllOptionalWhere
}

input ListPeopleAllOptionalWhere {
  dateOfBirth: DateQueryInput
  name: StringQueryInput
  occupation: OccupationQueryInput
}

input ListPeopleInput {
  after: String
  before: String
  first: Int
  last: Int
  where: ListPeopleWhere!
}

input ListPeopleWhere {
  dateOfBirth: DateQueryInput!
  name: StringQueryInput!
  occupation: OccupationQueryInput!
}

input OccupationQueryInput {
  equals: Occupation
  notEquals: Occupation
  oneOf: [Occupation]
}

input StringQueryInput {
  contains: String
  endsWith: String
  equals: String
  notEquals: String
  oneOf: [String]
  startsWith: String
}

type Date {
  formatted(format: String!): String!
  iso8601: String!
}

type PageInfo {
  count: Int!
  endCursor: String!
  hasNextPage: Boolean!
  startCursor: String!
  totalCount: Int!
}

type Person {
  createdAt: Timestamp!
  dateOfBirth: Date
  id: ID!
  name: String
  occupation: Occupation
  updatedAt: Timestamp!
}

type PersonConnection {
  edges: [PersonEdge!]!
  pageInfo: PageInfo!
}

type PersonEdge {
  node: Person!
}

type Timestamp {
  formatted(format: String!): String!
  fromNow: String!
  iso8601: String!
  seconds: Int!
}

enum Occupation {
  Astronaut
  Doctor
  Teacher
}

scalar Any

scalar ISO8601
