
export type {{ .Name }}Query = Partial<{
  {{ .QueryConstraints }}
}>

export type {{ .Name }}UniqueFields = Partial<{
  {{ .UniqueFields }}
}>

export class {{ .Name }}Api {
  private readonly db : Query<{{ .Name }}>;

  constructor() {
    this.db = new Query<{{ .Name }}>({
      tableName: '{{ .TableName }}',
      queryResolver: queryResolverFromEnv(process.env),
      logger: queryLogger
    })
  }

  create = async (inputs: Partial<Omit<{{ .Name }}, "id" | "createdAt" | "updatedAt">>) : Promise<FunctionCreateResponse<{{ .Name }}>> => {
    return this.db.create(inputs);
  }

  where = (conditions: {{ .Name }}Query) : ChainableQuery<{{ .Name }}> => {
    return this.db.where(conditions as any);
  }

  delete = (id: string) : Promise<FunctionDeleteResponse<{{ .Name }}>> => {
    return this.db.delete(id);
  }

  findOne = (query: {{ .Name }}UniqueFields) : Promise<FunctionGetResponse<{{ .Name }}>> => {
    return this.db.findOne(query as any);
  }

  update = (id: string, inputs: Partial<Omit<{{ .Name }}, "id" | "createdAt" | "updatedAt">>) : Promise<FunctionUpdateResponse<{{ .Name }}>> => {
    return this.db.update(id, inputs as any);
  }

  findMany = (query: {{ .Name }}Query) : Promise<FunctionListResponse<{{ .Name }}>> => {
    return this.db.where(query as any).all();
  }
}