model Post {
  fields {
    title Text
    published Boolean
  }
}

===

export type PostQuery = Partial<{
  title?: QueryConstraints.StringConstraint
  published?: QueryConstraints.BooleanConstraint
  id?: QueryConstraints.StringConstraint
  createdAt?: QueryConstraints.DateConstraint
  updatedAt?: QueryConstraints.DateConstraint
}>

export type PostUniqueFields = Partial<{
  id?: QueryConstraints.StringConstraint
}>

export class PostApi {
  private readonly db : Query<Post>;

  constructor(pool: DatabasePool) {
    this.db = new Query<Post>({
      tableName: 'post',
      pool,
      logger: queryLogger
    })
  }

  create = async (inputs: Partial<Omit<Post, "id" | "createdAt" | "updatedAt">>) : Promise<Post> => {
    return this.db.create(inputs);
  }

  where = (conditions: PostQuery) : ChainableQuery<Post> => {
    return this.db.where(conditions as any);
  }

  delete = (id: string) : Promise<boolean> => {
    return this.db.delete(id);
  }

  findOne = (query: PostUniqueFields) : Promise<Post> => {
    return this.db.findOne(query as any);
  }

  update = (id: string, inputs: Partial<Omit<Post, "id" | "createdAt" | "updatedAt">>) : Promise<Post> => {
    return this.db.update(id, inputs as any);
  }

  findMany = (query: PostQuery) : Promise<Post[]> => {
    return this.db.where(query as any).all();
  }
}
export interface API {
  models: {
    post: PostApi

  }
}
