// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.0
// source: tools.proto

package proto

import (
	proto "github.com/teamkeel/keel/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DisplayLayoutConfig_Type int32

const (
	DisplayLayoutConfig_UNKNOWN DisplayLayoutConfig_Type = 0
	DisplayLayoutConfig_INBOX   DisplayLayoutConfig_Type = 1
)

// Enum value maps for DisplayLayoutConfig_Type.
var (
	DisplayLayoutConfig_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "INBOX",
	}
	DisplayLayoutConfig_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"INBOX":   1,
	}
)

func (x DisplayLayoutConfig_Type) Enum() *DisplayLayoutConfig_Type {
	p := new(DisplayLayoutConfig_Type)
	*p = x
	return p
}

func (x DisplayLayoutConfig_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisplayLayoutConfig_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_tools_proto_enumTypes[0].Descriptor()
}

func (DisplayLayoutConfig_Type) Type() protoreflect.EnumType {
	return &file_tools_proto_enumTypes[0]
}

func (x DisplayLayoutConfig_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisplayLayoutConfig_Type.Descriptor instead.
func (DisplayLayoutConfig_Type) EnumDescriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{13, 0}
}

type Capabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments bool `protobuf:"varint,1,opt,name=comments,proto3" json:"comments,omitempty"`
	Audit    bool `protobuf:"varint,2,opt,name=audit,proto3" json:"audit,omitempty"`
}

func (x *Capabilities) Reset() {
	*x = Capabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities) ProtoMessage() {}

func (x *Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities.ProtoReflect.Descriptor instead.
func (*Capabilities) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{0}
}

func (x *Capabilities) GetComments() bool {
	if x != nil {
		return x.Comments
	}
	return false
}

func (x *Capabilities) GetAudit() bool {
	if x != nil {
		return x.Audit
	}
	return false
}

type ActionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A slug identifier for this tool used to reference it regardless of the build/environment;
	// E.g. get-order, or get-order-2
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Sentence case the action name e.g "Get order"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Skipped for auto generated tools
	Icon *string `protobuf:"bytes,3,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	// The action in the schema e.g "getOrder"
	ActionName string `protobuf:"bytes,4,opt,name=action_name,json=actionName,proto3" json:"action_name,omitempty"`
	// The names of the APIs in which this action sits
	ApiNames []string `protobuf:"bytes,5,rep,name=api_names,json=apiNames,proto3" json:"api_names,omitempty"`
	// The name of the model on which this tool operates on.
	ModelName      string                     `protobuf:"bytes,6,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	ActionType     proto.ActionType           `protobuf:"varint,7,opt,name=action_type,json=actionType,proto3,enum=proto.ActionType" json:"action_type,omitempty"`
	Implementation proto.ActionImplementation `protobuf:"varint,8,opt,name=implementation,proto3,enum=proto.ActionImplementation" json:"implementation,omitempty"`
	Inputs         []*RequestFieldConfig      `protobuf:"bytes,9,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Response       []*ResponseFieldConfig     `protobuf:"bytes,10,rep,name=response,proto3" json:"response,omitempty"`
	// Title of the tool.
	// Default value: a template with the first field of the model if it's a text field,
	// otherwise empty.
	Title *StringTemplate `protobuf:"bytes,11,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Template language support: markdown
	HelpText *StringTemplate `protobuf:"bytes,12,opt,name=help_text,json=helpText,proto3,oneof" json:"help_text,omitempty"`
	// The name of the entity associated with this tool, in a singular form (e.g. order, user).
	// The word is lowercased; for generated tools it is the name of the model
	EntitySingle string `protobuf:"bytes,13,opt,name=entity_single,json=entitySingle,proto3" json:"entity_single,omitempty"`
	// The name of the entity associated with this tool, in a plural form (e.g. orders, users).
	// The word is lowercased; for generated tools it is derived from name of the model
	EntityPlural string `protobuf:"bytes,14,opt,name=entity_plural,json=entityPlural,proto3" json:"entity_plural,omitempty"`
	// What features are enabled for this tool
	Capabilities *Capabilities `protobuf:"bytes,15,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// Only for List actions; aka views.
	// E.g. For a listOrders action; these would be tabs that show filtered orders by status
	// (Processed, Pending, Completed)
	// For auto-generated configs, this is only populated for list actions, with links to other list
	// actions for the same model.
	RelatedActions []*ActionLink `protobuf:"bytes,16,rep,name=related_actions,json=relatedActions,proto3" json:"related_actions,omitempty"`
	// Only for List actions; Support offset and cursor
	Pagination *CursorPaginationConfig `protobuf:"bytes,17,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	// List of extenal links that will be displayed with this tool; used only for Get actions.
	// Nothing for auto generated
	ExternalLinks []*ExternalLink `protobuf:"bytes,18,rep,name=external_links,json=externalLinks,proto3" json:"external_links,omitempty"`
	// Things you can do to this entry
	// All update, deletes, creates, read and write on the same model.
	// Only for List & Get; empty for mutations
	EntryActivityActions []*ActionLink `protobuf:"bytes,19,rep,name=entry_activity_actions,json=entryActivityActions,proto3" json:"entry_activity_actions,omitempty"`
	// The action to use to get an entry on this model. Default to a get action on the same model
	// Used for:
	// - fetching the record for prefilling a mutation
	// - the link for clicking a row in a List
	// - the action to call after a mutation
	GetEntryAction *ActionLink `protobuf:"bytes,21,opt,name=get_entry_action,json=getEntryAction,proto3,oneof" json:"get_entry_action,omitempty"`
	// The action to use to create a new entry for this model. By default, this action link will be created
	// for LIST and GET actions in the case where a CREATE action exists for the same model. It should
	// be used to add a button on the tool to `Create a new/another record`
	CreateEntryAction *ActionLink `protobuf:"bytes,22,opt,name=create_entry_action,json=createEntryAction,proto3,oneof" json:"create_entry_action,omitempty"`
	// Embeded action groups are tools that will be displayed inline (embedded) withing the one that
	// we're defining. These tools will be rendered within this action's configuration, and can have
	// specific config overrides.
	EmbeddedTools []*ToolGroup `protobuf:"bytes,23,rep,name=embedded_tools,json=embeddedTools,proto3" json:"embedded_tools,omitempty"`
	// Configuration for different views that are enabled for this tool. A tool can be configured to be
	// displayable in multiple types of views, for example, as a table, as an email inbox, or a kanban
	// board. Each view will require specific configuration, these are supplied as part of the
	// DisplayLayoutConfig message.
	DisplayLayout *DisplayLayoutConfig `protobuf:"bytes,24,opt,name=display_layout,json=displayLayout,proto3" json:"display_layout,omitempty"`
}

func (x *ActionConfig) Reset() {
	*x = ActionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionConfig) ProtoMessage() {}

func (x *ActionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionConfig.ProtoReflect.Descriptor instead.
func (*ActionConfig) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{1}
}

func (x *ActionConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActionConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActionConfig) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *ActionConfig) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *ActionConfig) GetApiNames() []string {
	if x != nil {
		return x.ApiNames
	}
	return nil
}

func (x *ActionConfig) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *ActionConfig) GetActionType() proto.ActionType {
	if x != nil {
		return x.ActionType
	}
	return proto.ActionType(0)
}

func (x *ActionConfig) GetImplementation() proto.ActionImplementation {
	if x != nil {
		return x.Implementation
	}
	return proto.ActionImplementation(0)
}

func (x *ActionConfig) GetInputs() []*RequestFieldConfig {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ActionConfig) GetResponse() []*ResponseFieldConfig {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ActionConfig) GetTitle() *StringTemplate {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *ActionConfig) GetHelpText() *StringTemplate {
	if x != nil {
		return x.HelpText
	}
	return nil
}

func (x *ActionConfig) GetEntitySingle() string {
	if x != nil {
		return x.EntitySingle
	}
	return ""
}

func (x *ActionConfig) GetEntityPlural() string {
	if x != nil {
		return x.EntityPlural
	}
	return ""
}

func (x *ActionConfig) GetCapabilities() *Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *ActionConfig) GetRelatedActions() []*ActionLink {
	if x != nil {
		return x.RelatedActions
	}
	return nil
}

func (x *ActionConfig) GetPagination() *CursorPaginationConfig {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ActionConfig) GetExternalLinks() []*ExternalLink {
	if x != nil {
		return x.ExternalLinks
	}
	return nil
}

func (x *ActionConfig) GetEntryActivityActions() []*ActionLink {
	if x != nil {
		return x.EntryActivityActions
	}
	return nil
}

func (x *ActionConfig) GetGetEntryAction() *ActionLink {
	if x != nil {
		return x.GetEntryAction
	}
	return nil
}

func (x *ActionConfig) GetCreateEntryAction() *ActionLink {
	if x != nil {
		return x.CreateEntryAction
	}
	return nil
}

func (x *ActionConfig) GetEmbeddedTools() []*ToolGroup {
	if x != nil {
		return x.EmbeddedTools
	}
	return nil
}

func (x *ActionConfig) GetDisplayLayout() *DisplayLayoutConfig {
	if x != nil {
		return x.DisplayLayout
	}
	return nil
}

type RequestFieldConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// common fields
	FieldLocation *JsonPath       `protobuf:"bytes,2,opt,name=field_location,json=fieldLocation,proto3" json:"field_location,omitempty"`
	FieldType     proto.Type      `protobuf:"varint,3,opt,name=field_type,json=fieldType,proto3,enum=proto.Type" json:"field_type,omitempty"`
	Repeated      bool            `protobuf:"varint,4,opt,name=repeated,proto3" json:"repeated,omitempty"`
	DisplayName   string          `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	DisplayOrder  int32           `protobuf:"varint,6,opt,name=display_order,json=displayOrder,proto3" json:"display_order,omitempty"`
	Visible       bool            `protobuf:"varint,7,opt,name=visible,proto3" json:"visible,omitempty"`
	HelpText      *StringTemplate `protobuf:"bytes,8,opt,name=help_text,json=helpText,proto3,oneof" json:"help_text,omitempty"`
	// For a relation field - A list action with the fewest required inputs on the target model
	// Used to display a lookup/dropdown to allow selecting a entry for this field
	LookupAction *ActionLink `protobuf:"bytes,9,opt,name=lookup_action,json=lookupAction,proto3,oneof" json:"lookup_action,omitempty"`
	// For a relation field - Used for loading a preview
	GetEntryAction *ActionLink     `protobuf:"bytes,10,opt,name=get_entry_action,json=getEntryAction,proto3,oneof" json:"get_entry_action,omitempty"`
	Locked         bool            `protobuf:"varint,11,opt,name=locked,proto3" json:"locked,omitempty"`
	DefaultValue   *ScalarValue    `protobuf:"bytes,12,opt,name=default_value,json=defaultValue,proto3,oneof" json:"default_value,omitempty"`
	Placeholder    *StringTemplate `protobuf:"bytes,13,opt,name=placeholder,proto3,oneof" json:"placeholder,omitempty"`
	// If `type` is set to TYPE_ENUM then this value is the name of the
	// the enum that the type refers to.
	EnumName *string `protobuf:"bytes,14,opt,name=enum_name,json=enumName,proto3,oneof" json:"enum_name,omitempty"`
	// If this field is set then this type is referring to another model.
	// In the case of TYPE_MODEL this type _is_ the model named here.
	// In the case of other types e.g. TYPE_ID this type is referencing a field
	// on the model named here, and the specific field being referenced is indicated
	// by `field_name`.
	ModelName *string `protobuf:"bytes,15,opt,name=model_name,json=modelName,proto3,oneof" json:"model_name,omitempty"`
	// This field indicates which field on `model_name` this type is referencing.
	// This field should only be set if `model_name` is set.
	FieldName *string `protobuf:"bytes,16,opt,name=field_name,json=fieldName,proto3,oneof" json:"field_name,omitempty"`
}

func (x *RequestFieldConfig) Reset() {
	*x = RequestFieldConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestFieldConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestFieldConfig) ProtoMessage() {}

func (x *RequestFieldConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestFieldConfig.ProtoReflect.Descriptor instead.
func (*RequestFieldConfig) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{2}
}

func (x *RequestFieldConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestFieldConfig) GetFieldLocation() *JsonPath {
	if x != nil {
		return x.FieldLocation
	}
	return nil
}

func (x *RequestFieldConfig) GetFieldType() proto.Type {
	if x != nil {
		return x.FieldType
	}
	return proto.Type(0)
}

func (x *RequestFieldConfig) GetRepeated() bool {
	if x != nil {
		return x.Repeated
	}
	return false
}

func (x *RequestFieldConfig) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RequestFieldConfig) GetDisplayOrder() int32 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *RequestFieldConfig) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *RequestFieldConfig) GetHelpText() *StringTemplate {
	if x != nil {
		return x.HelpText
	}
	return nil
}

func (x *RequestFieldConfig) GetLookupAction() *ActionLink {
	if x != nil {
		return x.LookupAction
	}
	return nil
}

func (x *RequestFieldConfig) GetGetEntryAction() *ActionLink {
	if x != nil {
		return x.GetEntryAction
	}
	return nil
}

func (x *RequestFieldConfig) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *RequestFieldConfig) GetDefaultValue() *ScalarValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *RequestFieldConfig) GetPlaceholder() *StringTemplate {
	if x != nil {
		return x.Placeholder
	}
	return nil
}

func (x *RequestFieldConfig) GetEnumName() string {
	if x != nil && x.EnumName != nil {
		return *x.EnumName
	}
	return ""
}

func (x *RequestFieldConfig) GetModelName() string {
	if x != nil && x.ModelName != nil {
		return *x.ModelName
	}
	return ""
}

func (x *RequestFieldConfig) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

type ResponseFieldConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FieldLocation *JsonPath  `protobuf:"bytes,2,opt,name=field_location,json=fieldLocation,proto3" json:"field_location,omitempty"`
	FieldType     proto.Type `protobuf:"varint,3,opt,name=field_type,json=fieldType,proto3,enum=proto.Type" json:"field_type,omitempty"`
	Repeated      bool       `protobuf:"varint,4,opt,name=repeated,proto3" json:"repeated,omitempty"`
	// default to sentence case
	DisplayName  string          `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	DisplayOrder int32           `protobuf:"varint,6,opt,name=display_order,json=displayOrder,proto3" json:"display_order,omitempty"`
	Visible      bool            `protobuf:"varint,7,opt,name=visible,proto3" json:"visible,omitempty"`
	HelpText     *StringTemplate `protobuf:"bytes,8,opt,name=help_text,json=helpText,proto3,oneof" json:"help_text,omitempty"`
	Sortable     bool            `protobuf:"varint,9,opt,name=sortable,proto3" json:"sortable,omitempty"` // Based on @sortable()
	// Set if this field is a FK and link to a get/list action on the target model
	// Or set to an appropriate list action if this field is a to-many field - for example, linking to listSaleItems(sale.id)
	Link *ActionLink `protobuf:"bytes,10,opt,name=link,proto3,oneof" json:"link,omitempty"`
	// for file fields only, display images inline
	ImagePreview bool `protobuf:"varint,11,opt,name=image_preview,json=imagePreview,proto3" json:"image_preview,omitempty"`
	// If `type` is set to TYPE_ENUM then this value is the name of the
	// the enum that the type refers to.
	EnumName *string `protobuf:"bytes,12,opt,name=enum_name,json=enumName,proto3,oneof" json:"enum_name,omitempty"`
	// If this field is set then this type is referring to another model.
	// In the case of TYPE_MODEL this type _is_ the model named here.
	// In the case of other types e.g. TYPE_ID this type is referencing a field
	// on the model named here, and the specific field being referenced is indicated
	// by `field_name`.
	ModelName *string `protobuf:"bytes,13,opt,name=model_name,json=modelName,proto3,oneof" json:"model_name,omitempty"`
	// This field indicates which field on `model_name` this type is referencing.
	// This field should only be set if `model_name` is set.
	FieldName *string `protobuf:"bytes,14,opt,name=field_name,json=fieldName,proto3,oneof" json:"field_name,omitempty"`
}

func (x *ResponseFieldConfig) Reset() {
	*x = ResponseFieldConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFieldConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFieldConfig) ProtoMessage() {}

func (x *ResponseFieldConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFieldConfig.ProtoReflect.Descriptor instead.
func (*ResponseFieldConfig) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{3}
}

func (x *ResponseFieldConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResponseFieldConfig) GetFieldLocation() *JsonPath {
	if x != nil {
		return x.FieldLocation
	}
	return nil
}

func (x *ResponseFieldConfig) GetFieldType() proto.Type {
	if x != nil {
		return x.FieldType
	}
	return proto.Type(0)
}

func (x *ResponseFieldConfig) GetRepeated() bool {
	if x != nil {
		return x.Repeated
	}
	return false
}

func (x *ResponseFieldConfig) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ResponseFieldConfig) GetDisplayOrder() int32 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *ResponseFieldConfig) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *ResponseFieldConfig) GetHelpText() *StringTemplate {
	if x != nil {
		return x.HelpText
	}
	return nil
}

func (x *ResponseFieldConfig) GetSortable() bool {
	if x != nil {
		return x.Sortable
	}
	return false
}

func (x *ResponseFieldConfig) GetLink() *ActionLink {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *ResponseFieldConfig) GetImagePreview() bool {
	if x != nil {
		return x.ImagePreview
	}
	return false
}

func (x *ResponseFieldConfig) GetEnumName() string {
	if x != nil && x.EnumName != nil {
		return *x.EnumName
	}
	return ""
}

func (x *ResponseFieldConfig) GetModelName() string {
	if x != nil && x.ModelName != nil {
		return *x.ModelName
	}
	return ""
}

func (x *ResponseFieldConfig) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

type ScalarValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ScalarValue_String_
	//	*ScalarValue_Integer
	//	*ScalarValue_Float
	//	*ScalarValue_Bool
	Value isScalarValue_Value `protobuf_oneof:"value"`
}

func (x *ScalarValue) Reset() {
	*x = ScalarValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarValue) ProtoMessage() {}

func (x *ScalarValue) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarValue.ProtoReflect.Descriptor instead.
func (*ScalarValue) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{4}
}

func (m *ScalarValue) GetValue() isScalarValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ScalarValue) GetString_() string {
	if x, ok := x.GetValue().(*ScalarValue_String_); ok {
		return x.String_
	}
	return ""
}

func (x *ScalarValue) GetInteger() int32 {
	if x, ok := x.GetValue().(*ScalarValue_Integer); ok {
		return x.Integer
	}
	return 0
}

func (x *ScalarValue) GetFloat() float32 {
	if x, ok := x.GetValue().(*ScalarValue_Float); ok {
		return x.Float
	}
	return 0
}

func (x *ScalarValue) GetBool() bool {
	if x, ok := x.GetValue().(*ScalarValue_Bool); ok {
		return x.Bool
	}
	return false
}

type isScalarValue_Value interface {
	isScalarValue_Value()
}

type ScalarValue_String_ struct {
	String_ string `protobuf:"bytes,1,opt,name=string,proto3,oneof"`
}

type ScalarValue_Integer struct {
	Integer int32 `protobuf:"varint,2,opt,name=integer,proto3,oneof"`
}

type ScalarValue_Float struct {
	Float float32 `protobuf:"fixed32,3,opt,name=float,proto3,oneof"`
}

type ScalarValue_Bool struct {
	Bool bool `protobuf:"varint,4,opt,name=bool,proto3,oneof"`
}

func (*ScalarValue_String_) isScalarValue_Value() {}

func (*ScalarValue_Integer) isScalarValue_Value() {}

func (*ScalarValue_Float) isScalarValue_Value() {}

func (*ScalarValue_Bool) isScalarValue_Value() {}

type StringTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// e.g. "{{$.firstName}} {{$.lastName}}" template syntax TBC.
	Template string `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	// If markdown is supported for this template. e.g.
	// Italic text: _{{$.Var}}_
	Markdown bool `protobuf:"varint,2,opt,name=markdown,proto3" json:"markdown,omitempty"`
}

func (x *StringTemplate) Reset() {
	*x = StringTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringTemplate) ProtoMessage() {}

func (x *StringTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringTemplate.ProtoReflect.Descriptor instead.
func (*StringTemplate) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{5}
}

func (x *StringTemplate) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *StringTemplate) GetMarkdown() bool {
	if x != nil {
		return x.Markdown
	}
	return false
}

type JsonPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *JsonPath) Reset() {
	*x = JsonPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonPath) ProtoMessage() {}

func (x *JsonPath) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonPath.ProtoReflect.Descriptor instead.
func (*JsonPath) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{6}
}

func (x *JsonPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ExternalLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label        *StringTemplate `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Href         *StringTemplate `protobuf:"bytes,2,opt,name=href,proto3" json:"href,omitempty"`
	Icon         *string         `protobuf:"bytes,3,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	DisplayOrder int32           `protobuf:"varint,4,opt,name=display_order,json=displayOrder,proto3" json:"display_order,omitempty"`
}

func (x *ExternalLink) Reset() {
	*x = ExternalLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalLink) ProtoMessage() {}

func (x *ExternalLink) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalLink.ProtoReflect.Descriptor instead.
func (*ExternalLink) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{7}
}

func (x *ExternalLink) GetLabel() *StringTemplate {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ExternalLink) GetHref() *StringTemplate {
	if x != nil {
		return x.Href
	}
	return nil
}

func (x *ExternalLink) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *ExternalLink) GetDisplayOrder() int32 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

type ActionLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ToolId string `protobuf:"bytes,2,opt,name=tool_id,json=toolId,proto3" json:"tool_id,omitempty"`
	// The shape of this data is the input for the target action (i.e. 'where' and not 'values') but
	// with JSON paths for field values. Is a full  object tree
	// e.g.
	//
	//	{
	//		"where": {
	//			"id": "$.id" // JSON path on the current action repsonse. Can be recursive
	//		}
	//	}
	Data []*DataMapping `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	// Title/label to be displayed as part of the link/button created for this action link.
	Title *StringTemplate `protobuf:"bytes,4,opt,name=title,proto3,oneof" json:"title,omitempty"` // Empty by default
	// An optional string template which is to be displayed as a description/tagline for this link.
	Description *StringTemplate `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"` // Empty by default
	// When the link is used within a list of action links, this field will be used to order items.
	DisplayOrder int32 `protobuf:"varint,6,opt,name=display_order,json=displayOrder,proto3" json:"display_order,omitempty"`
}

func (x *ActionLink) Reset() {
	*x = ActionLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionLink) ProtoMessage() {}

func (x *ActionLink) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionLink.ProtoReflect.Descriptor instead.
func (*ActionLink) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{8}
}

func (x *ActionLink) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActionLink) GetToolId() string {
	if x != nil {
		return x.ToolId
	}
	return ""
}

func (x *ActionLink) GetData() []*DataMapping {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ActionLink) GetTitle() *StringTemplate {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *ActionLink) GetDescription() *StringTemplate {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ActionLink) GetDisplayOrder() int32 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

type ToolGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A reference that persists for this tool group from build to build
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Title of the group
	Title        *StringTemplate `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	DisplayOrder int32           `protobuf:"varint,3,opt,name=display_order,json=displayOrder,proto3" json:"display_order,omitempty"`
	// A list of decorated ActionLinks which will be embedded within this group
	Tools   []*ToolGroup_GroupActionLink `protobuf:"bytes,4,rep,name=tools,proto3" json:"tools,omitempty"`
	Visible bool                         `protobuf:"varint,5,opt,name=visible,proto3" json:"visible,omitempty"`
}

func (x *ToolGroup) Reset() {
	*x = ToolGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolGroup) ProtoMessage() {}

func (x *ToolGroup) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolGroup.ProtoReflect.Descriptor instead.
func (*ToolGroup) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{9}
}

func (x *ToolGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ToolGroup) GetTitle() *StringTemplate {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *ToolGroup) GetDisplayOrder() int32 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *ToolGroup) GetTools() []*ToolGroup_GroupActionLink {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *ToolGroup) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

type ResponseOverrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldLocation *JsonPath `protobuf:"bytes,1,opt,name=field_location,json=fieldLocation,proto3" json:"field_location,omitempty"`
	// Controls the visibility of the response field
	Visible bool `protobuf:"varint,2,opt,name=visible,proto3" json:"visible,omitempty"`
}

func (x *ResponseOverrides) Reset() {
	*x = ResponseOverrides{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseOverrides) ProtoMessage() {}

func (x *ResponseOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseOverrides.ProtoReflect.Descriptor instead.
func (*ResponseOverrides) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{10}
}

func (x *ResponseOverrides) GetFieldLocation() *JsonPath {
	if x != nil {
		return x.FieldLocation
	}
	return nil
}

func (x *ResponseOverrides) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

type CursorPaginationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start      *CursorPaginationConfig_FieldConfig    `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End        *CursorPaginationConfig_FieldConfig    `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	PageSize   *CursorPaginationConfig_PageSizeConfig `protobuf:"bytes,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPage   *JsonPath                              `protobuf:"bytes,4,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	TotalCount *JsonPath                              `protobuf:"bytes,5,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *CursorPaginationConfig) Reset() {
	*x = CursorPaginationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CursorPaginationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CursorPaginationConfig) ProtoMessage() {}

func (x *CursorPaginationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CursorPaginationConfig.ProtoReflect.Descriptor instead.
func (*CursorPaginationConfig) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{11}
}

func (x *CursorPaginationConfig) GetStart() *CursorPaginationConfig_FieldConfig {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CursorPaginationConfig) GetEnd() *CursorPaginationConfig_FieldConfig {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *CursorPaginationConfig) GetPageSize() *CursorPaginationConfig_PageSizeConfig {
	if x != nil {
		return x.PageSize
	}
	return nil
}

func (x *CursorPaginationConfig) GetNextPage() *JsonPath {
	if x != nil {
		return x.NextPage
	}
	return nil
}

func (x *CursorPaginationConfig) GetTotalCount() *JsonPath {
	if x != nil {
		return x.TotalCount
	}
	return nil
}

// DataMapping maps a response value or a scalar value to inputs. For each input's key we can have one of:
// - a path to a response field
// - a dataMapping object (for nested fields)
// - a scalar value
type DataMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string         `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Path   *JsonPath      `protobuf:"bytes,2,opt,name=path,proto3,oneof" json:"path,omitempty"`
	Object []*DataMapping `protobuf:"bytes,3,rep,name=object,proto3" json:"object,omitempty"`
	Value  *ScalarValue   `protobuf:"bytes,4,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *DataMapping) Reset() {
	*x = DataMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMapping) ProtoMessage() {}

func (x *DataMapping) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMapping.ProtoReflect.Descriptor instead.
func (*DataMapping) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{12}
}

func (x *DataMapping) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DataMapping) GetPath() *JsonPath {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *DataMapping) GetObject() []*DataMapping {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *DataMapping) GetValue() *ScalarValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type DisplayLayoutConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the view: e.g. Inbox, List, Calendar, Table, Data Grid
	Type        DisplayLayoutConfig_Type `protobuf:"varint,1,opt,name=type,proto3,enum=tools.DisplayLayoutConfig_Type" json:"type,omitempty"`
	InboxConfig *InboxViewConfig         `protobuf:"bytes,2,opt,name=inbox_config,json=inboxConfig,proto3,oneof" json:"inbox_config,omitempty"`
}

func (x *DisplayLayoutConfig) Reset() {
	*x = DisplayLayoutConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayLayoutConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayLayoutConfig) ProtoMessage() {}

func (x *DisplayLayoutConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayLayoutConfig.ProtoReflect.Descriptor instead.
func (*DisplayLayoutConfig) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{13}
}

func (x *DisplayLayoutConfig) GetType() DisplayLayoutConfig_Type {
	if x != nil {
		return x.Type
	}
	return DisplayLayoutConfig_UNKNOWN
}

func (x *DisplayLayoutConfig) GetInboxConfig() *InboxViewConfig {
	if x != nil {
		return x.InboxConfig
	}
	return nil
}

// An email inbox style display for list views. Each item in a list will be displayed as a row with
// an exapandable view
type InboxViewConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A link to a get action that will be used when the item is expanded
	GetTool *ActionLink `protobuf:"bytes,1,opt,name=get_tool,json=getTool,proto3" json:"get_tool,omitempty"`
	// The primary content of the row
	Title *StringTemplate `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// The secondary content of the row
	Description *StringTemplate `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Content to be displayed in the right hand side of the row
	ContextField *StringTemplate `protobuf:"bytes,4,opt,name=context_field,json=contextField,proto3,oneof" json:"context_field,omitempty"`
	// If an avatar/image is to be displayed with every row
	AvatarEnabled bool `protobuf:"varint,5,opt,name=avatar_enabled,json=avatarEnabled,proto3" json:"avatar_enabled,omitempty"`
	// URL for the image.
	AvatarUrl      *StringTemplate `protobuf:"bytes,6,opt,name=avatar_url,json=avatarUrl,proto3,oneof" json:"avatar_url,omitempty"`
	AvatarFallback *StringTemplate `protobuf:"bytes,7,opt,name=avatar_fallback,json=avatarFallback,proto3,oneof" json:"avatar_fallback,omitempty"`
}

func (x *InboxViewConfig) Reset() {
	*x = InboxViewConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboxViewConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboxViewConfig) ProtoMessage() {}

func (x *InboxViewConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboxViewConfig.ProtoReflect.Descriptor instead.
func (*InboxViewConfig) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{14}
}

func (x *InboxViewConfig) GetGetTool() *ActionLink {
	if x != nil {
		return x.GetTool
	}
	return nil
}

func (x *InboxViewConfig) GetTitle() *StringTemplate {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *InboxViewConfig) GetDescription() *StringTemplate {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *InboxViewConfig) GetContextField() *StringTemplate {
	if x != nil {
		return x.ContextField
	}
	return nil
}

func (x *InboxViewConfig) GetAvatarEnabled() bool {
	if x != nil {
		return x.AvatarEnabled
	}
	return false
}

func (x *InboxViewConfig) GetAvatarUrl() *StringTemplate {
	if x != nil {
		return x.AvatarUrl
	}
	return nil
}

func (x *InboxViewConfig) GetAvatarFallback() *StringTemplate {
	if x != nil {
		return x.AvatarFallback
	}
	return nil
}

// When embedding ActionLinks, we need to provide extra-configuration that will override the
// link's target tool configuration
type ToolGroup_GroupActionLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionLink *ActionLink `protobuf:"bytes,1,opt,name=action_link,json=actionLink,proto3" json:"action_link,omitempty"`
	// The config for responses of the target tool for this embedded action can be altered for
	// this embed group
	ResponseOverrides []*ResponseOverrides `protobuf:"bytes,2,rep,name=response_overrides,json=responseOverrides,proto3" json:"response_overrides,omitempty"`
}

func (x *ToolGroup_GroupActionLink) Reset() {
	*x = ToolGroup_GroupActionLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolGroup_GroupActionLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolGroup_GroupActionLink) ProtoMessage() {}

func (x *ToolGroup_GroupActionLink) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolGroup_GroupActionLink.ProtoReflect.Descriptor instead.
func (*ToolGroup_GroupActionLink) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ToolGroup_GroupActionLink) GetActionLink() *ActionLink {
	if x != nil {
		return x.ActionLink
	}
	return nil
}

func (x *ToolGroup_GroupActionLink) GetResponseOverrides() []*ResponseOverrides {
	if x != nil {
		return x.ResponseOverrides
	}
	return nil
}

// TBD
type CursorPaginationConfig_FieldConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestInput  string    `protobuf:"bytes,1,opt,name=request_input,json=requestInput,proto3" json:"request_input,omitempty"`
	ResponseField *JsonPath `protobuf:"bytes,2,opt,name=response_field,json=responseField,proto3" json:"response_field,omitempty"`
}

func (x *CursorPaginationConfig_FieldConfig) Reset() {
	*x = CursorPaginationConfig_FieldConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CursorPaginationConfig_FieldConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CursorPaginationConfig_FieldConfig) ProtoMessage() {}

func (x *CursorPaginationConfig_FieldConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CursorPaginationConfig_FieldConfig.ProtoReflect.Descriptor instead.
func (*CursorPaginationConfig_FieldConfig) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CursorPaginationConfig_FieldConfig) GetRequestInput() string {
	if x != nil {
		return x.RequestInput
	}
	return ""
}

func (x *CursorPaginationConfig_FieldConfig) GetResponseField() *JsonPath {
	if x != nil {
		return x.ResponseField
	}
	return nil
}

type CursorPaginationConfig_PageSizeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestInput  string    `protobuf:"bytes,1,opt,name=request_input,json=requestInput,proto3" json:"request_input,omitempty"`
	ResponseField *JsonPath `protobuf:"bytes,2,opt,name=response_field,json=responseField,proto3" json:"response_field,omitempty"`
	DefaultValue  int32     `protobuf:"varint,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (x *CursorPaginationConfig_PageSizeConfig) Reset() {
	*x = CursorPaginationConfig_PageSizeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CursorPaginationConfig_PageSizeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CursorPaginationConfig_PageSizeConfig) ProtoMessage() {}

func (x *CursorPaginationConfig_PageSizeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tools_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CursorPaginationConfig_PageSizeConfig.ProtoReflect.Descriptor instead.
func (*CursorPaginationConfig_PageSizeConfig) Descriptor() ([]byte, []int) {
	return file_tools_proto_rawDescGZIP(), []int{11, 1}
}

func (x *CursorPaginationConfig_PageSizeConfig) GetRequestInput() string {
	if x != nil {
		return x.RequestInput
	}
	return ""
}

func (x *CursorPaginationConfig_PageSizeConfig) GetResponseField() *JsonPath {
	if x != nil {
		return x.ResponseField
	}
	return nil
}

func (x *CursorPaginationConfig_PageSizeConfig) GetDefaultValue() int32 {
	if x != nil {
		return x.DefaultValue
	}
	return 0
}

var File_tools_proto protoreflect.FileDescriptor

var file_tools_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x1a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x40, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x22, 0xe2, 0x09, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x09, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48,
	0x02, 0x52, 0x08, 0x68, 0x65, 0x6c, 0x70, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c,
	0x75, 0x72, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0e, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0d,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x47, 0x0a,
	0x16, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x48, 0x04, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x05, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x06, 0x0a, 0x12, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x36, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x68, 0x65, 0x6c, 0x70, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0d, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x02, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x04, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x65, 0x6c,
	0x70, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xda, 0x04, 0x0a, 0x13,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x6f,
	0x6f, 0x6c, 0x73, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0d, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x68, 0x65, 0x6c, 0x70, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x01, 0x52, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x20, 0x0a, 0x09, 0x65,
	0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x1a, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x48, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x1e,
	0x0a, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xad,
	0x01, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x2b, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x04,
	0x68, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x04, 0x68, 0x72, 0x65, 0x66, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x8c,
	0x02, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd0, 0x02,
	0x0a, 0x09, 0x54, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x1a,
	0x8e, 0x01, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x32, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x47, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x11, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x22, 0x65, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0d,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0xc2, 0x04, 0x0a, 0x16, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x12, 0x49, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x6a, 0x0a, 0x0b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x36, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x92, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x36, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb7, 0x01, 0x0a,
	0x0b, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x88, 0x01, 0x01, 0x22, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x42, 0x4f,
	0x58, 0x10, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0xd7, 0x03, 0x0a, 0x0f, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x56, 0x69,
	0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f,
	0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x07, 0x67,
	0x65, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48,
	0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x48, 0x02, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x48, 0x03, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x26,
	0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x61,
	0x6d, 0x6b, 0x65, 0x65, 0x6c, 0x2f, 0x6b, 0x65, 0x65, 0x6c, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tools_proto_rawDescOnce sync.Once
	file_tools_proto_rawDescData = file_tools_proto_rawDesc
)

func file_tools_proto_rawDescGZIP() []byte {
	file_tools_proto_rawDescOnce.Do(func() {
		file_tools_proto_rawDescData = protoimpl.X.CompressGZIP(file_tools_proto_rawDescData)
	})
	return file_tools_proto_rawDescData
}

var file_tools_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tools_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_tools_proto_goTypes = []any{
	(DisplayLayoutConfig_Type)(0),                 // 0: tools.DisplayLayoutConfig.Type
	(*Capabilities)(nil),                          // 1: tools.Capabilities
	(*ActionConfig)(nil),                          // 2: tools.ActionConfig
	(*RequestFieldConfig)(nil),                    // 3: tools.RequestFieldConfig
	(*ResponseFieldConfig)(nil),                   // 4: tools.ResponseFieldConfig
	(*ScalarValue)(nil),                           // 5: tools.ScalarValue
	(*StringTemplate)(nil),                        // 6: tools.StringTemplate
	(*JsonPath)(nil),                              // 7: tools.JsonPath
	(*ExternalLink)(nil),                          // 8: tools.ExternalLink
	(*ActionLink)(nil),                            // 9: tools.ActionLink
	(*ToolGroup)(nil),                             // 10: tools.ToolGroup
	(*ResponseOverrides)(nil),                     // 11: tools.ResponseOverrides
	(*CursorPaginationConfig)(nil),                // 12: tools.CursorPaginationConfig
	(*DataMapping)(nil),                           // 13: tools.DataMapping
	(*DisplayLayoutConfig)(nil),                   // 14: tools.DisplayLayoutConfig
	(*InboxViewConfig)(nil),                       // 15: tools.InboxViewConfig
	(*ToolGroup_GroupActionLink)(nil),             // 16: tools.ToolGroup.GroupActionLink
	(*CursorPaginationConfig_FieldConfig)(nil),    // 17: tools.CursorPaginationConfig.FieldConfig
	(*CursorPaginationConfig_PageSizeConfig)(nil), // 18: tools.CursorPaginationConfig.PageSizeConfig
	(proto.ActionType)(0),                         // 19: proto.ActionType
	(proto.ActionImplementation)(0),               // 20: proto.ActionImplementation
	(proto.Type)(0),                               // 21: proto.Type
}
var file_tools_proto_depIdxs = []int32{
	19, // 0: tools.ActionConfig.action_type:type_name -> proto.ActionType
	20, // 1: tools.ActionConfig.implementation:type_name -> proto.ActionImplementation
	3,  // 2: tools.ActionConfig.inputs:type_name -> tools.RequestFieldConfig
	4,  // 3: tools.ActionConfig.response:type_name -> tools.ResponseFieldConfig
	6,  // 4: tools.ActionConfig.title:type_name -> tools.StringTemplate
	6,  // 5: tools.ActionConfig.help_text:type_name -> tools.StringTemplate
	1,  // 6: tools.ActionConfig.capabilities:type_name -> tools.Capabilities
	9,  // 7: tools.ActionConfig.related_actions:type_name -> tools.ActionLink
	12, // 8: tools.ActionConfig.pagination:type_name -> tools.CursorPaginationConfig
	8,  // 9: tools.ActionConfig.external_links:type_name -> tools.ExternalLink
	9,  // 10: tools.ActionConfig.entry_activity_actions:type_name -> tools.ActionLink
	9,  // 11: tools.ActionConfig.get_entry_action:type_name -> tools.ActionLink
	9,  // 12: tools.ActionConfig.create_entry_action:type_name -> tools.ActionLink
	10, // 13: tools.ActionConfig.embedded_tools:type_name -> tools.ToolGroup
	14, // 14: tools.ActionConfig.display_layout:type_name -> tools.DisplayLayoutConfig
	7,  // 15: tools.RequestFieldConfig.field_location:type_name -> tools.JsonPath
	21, // 16: tools.RequestFieldConfig.field_type:type_name -> proto.Type
	6,  // 17: tools.RequestFieldConfig.help_text:type_name -> tools.StringTemplate
	9,  // 18: tools.RequestFieldConfig.lookup_action:type_name -> tools.ActionLink
	9,  // 19: tools.RequestFieldConfig.get_entry_action:type_name -> tools.ActionLink
	5,  // 20: tools.RequestFieldConfig.default_value:type_name -> tools.ScalarValue
	6,  // 21: tools.RequestFieldConfig.placeholder:type_name -> tools.StringTemplate
	7,  // 22: tools.ResponseFieldConfig.field_location:type_name -> tools.JsonPath
	21, // 23: tools.ResponseFieldConfig.field_type:type_name -> proto.Type
	6,  // 24: tools.ResponseFieldConfig.help_text:type_name -> tools.StringTemplate
	9,  // 25: tools.ResponseFieldConfig.link:type_name -> tools.ActionLink
	6,  // 26: tools.ExternalLink.label:type_name -> tools.StringTemplate
	6,  // 27: tools.ExternalLink.href:type_name -> tools.StringTemplate
	13, // 28: tools.ActionLink.data:type_name -> tools.DataMapping
	6,  // 29: tools.ActionLink.title:type_name -> tools.StringTemplate
	6,  // 30: tools.ActionLink.description:type_name -> tools.StringTemplate
	6,  // 31: tools.ToolGroup.title:type_name -> tools.StringTemplate
	16, // 32: tools.ToolGroup.tools:type_name -> tools.ToolGroup.GroupActionLink
	7,  // 33: tools.ResponseOverrides.field_location:type_name -> tools.JsonPath
	17, // 34: tools.CursorPaginationConfig.start:type_name -> tools.CursorPaginationConfig.FieldConfig
	17, // 35: tools.CursorPaginationConfig.end:type_name -> tools.CursorPaginationConfig.FieldConfig
	18, // 36: tools.CursorPaginationConfig.page_size:type_name -> tools.CursorPaginationConfig.PageSizeConfig
	7,  // 37: tools.CursorPaginationConfig.next_page:type_name -> tools.JsonPath
	7,  // 38: tools.CursorPaginationConfig.total_count:type_name -> tools.JsonPath
	7,  // 39: tools.DataMapping.path:type_name -> tools.JsonPath
	13, // 40: tools.DataMapping.object:type_name -> tools.DataMapping
	5,  // 41: tools.DataMapping.value:type_name -> tools.ScalarValue
	0,  // 42: tools.DisplayLayoutConfig.type:type_name -> tools.DisplayLayoutConfig.Type
	15, // 43: tools.DisplayLayoutConfig.inbox_config:type_name -> tools.InboxViewConfig
	9,  // 44: tools.InboxViewConfig.get_tool:type_name -> tools.ActionLink
	6,  // 45: tools.InboxViewConfig.title:type_name -> tools.StringTemplate
	6,  // 46: tools.InboxViewConfig.description:type_name -> tools.StringTemplate
	6,  // 47: tools.InboxViewConfig.context_field:type_name -> tools.StringTemplate
	6,  // 48: tools.InboxViewConfig.avatar_url:type_name -> tools.StringTemplate
	6,  // 49: tools.InboxViewConfig.avatar_fallback:type_name -> tools.StringTemplate
	9,  // 50: tools.ToolGroup.GroupActionLink.action_link:type_name -> tools.ActionLink
	11, // 51: tools.ToolGroup.GroupActionLink.response_overrides:type_name -> tools.ResponseOverrides
	7,  // 52: tools.CursorPaginationConfig.FieldConfig.response_field:type_name -> tools.JsonPath
	7,  // 53: tools.CursorPaginationConfig.PageSizeConfig.response_field:type_name -> tools.JsonPath
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_tools_proto_init() }
func file_tools_proto_init() {
	if File_tools_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tools_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Capabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ActionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RequestFieldConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ResponseFieldConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ScalarValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*StringTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*JsonPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ExternalLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ActionLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ToolGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ResponseOverrides); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CursorPaginationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DataMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DisplayLayoutConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*InboxViewConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ToolGroup_GroupActionLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CursorPaginationConfig_FieldConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CursorPaginationConfig_PageSizeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tools_proto_msgTypes[1].OneofWrappers = []any{}
	file_tools_proto_msgTypes[2].OneofWrappers = []any{}
	file_tools_proto_msgTypes[3].OneofWrappers = []any{}
	file_tools_proto_msgTypes[4].OneofWrappers = []any{
		(*ScalarValue_String_)(nil),
		(*ScalarValue_Integer)(nil),
		(*ScalarValue_Float)(nil),
		(*ScalarValue_Bool)(nil),
	}
	file_tools_proto_msgTypes[7].OneofWrappers = []any{}
	file_tools_proto_msgTypes[8].OneofWrappers = []any{}
	file_tools_proto_msgTypes[12].OneofWrappers = []any{}
	file_tools_proto_msgTypes[13].OneofWrappers = []any{}
	file_tools_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tools_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tools_proto_goTypes,
		DependencyIndexes: file_tools_proto_depIdxs,
		EnumInfos:         file_tools_proto_enumTypes,
		MessageInfos:      file_tools_proto_msgTypes,
	}.Build()
	File_tools_proto = out.File
	file_tools_proto_rawDesc = nil
	file_tools_proto_goTypes = nil
	file_tools_proto_depIdxs = nil
}
