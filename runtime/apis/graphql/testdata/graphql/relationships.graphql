type Query {
  getOrder(input: getOrder_input!): Order
}

type Mutation {
  authenticate(input: authenticate_input!): authenticate_response
}

input EmailPassword_input {
  email: String!
  password: String!
}

input authenticate_input {
  createIfNotExists: Boolean
  emailPassword: EmailPassword_input!
}

input getOrder_input {
  id: ID!
}

type Order {
  createdAt: Timestamp!
  id: ID!
  items(after: String, before: String, first: Int, last: Int): OrderItem_connection!
  updatedAt: Timestamp!
}

type OrderItem {
  createdAt: Timestamp!
  id: ID!
  order: Order!
  orderId: ID!
  price: Int!
  updatedAt: Timestamp!
}

type OrderItem_connection {
  edges: [OrderItem_edge!]!
  pageInfo: PageInfo!
}

type OrderItem_edge {
  node: OrderItem!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  startCursor: String!
  totalCount: Int!
}

type Timestamp {
  formatted(format: String!): String!
  fromNow: String!
  iso8601: String!
}

type authenticate_response {
  identityCreated: Boolean!
  token: String!
}
