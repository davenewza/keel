model Account {
	fields {
		identity Identity {
			@unique
		}
		name Text
		email Text {
			@unique
		}
		teams TeamMember[] 
	}

	@permission(
		expression: account.identity == ctx.identity
		actions: [get, update]
	)
	@permission(
		expression: true
		actions: [create]
	)

	operations {
		create createAccount(name, email) {
			@set(account.identity = ctx.identity)
		}
		update updateAccountDetails(name, email)
		get myAccount() {
			@where(account.identity == ctx.identity)
		}
	}
}

model Team {
	fields {
		name Text
		members TeamMember[]
		projects Project[]
	}

	@permission(
		expression: team.members.account.identity contains ctx.identity
		actions: [create, get, list, update, delete]
	)

	operations {
		list myTeams() {
			@where(team.members.account.identity contains ctx.identity)
		}
		get getTeam(id)
		delete deleteTeam(id)
		create createTeam(name, members) 
	}
}

model TeamMember {
	fields {
		account Account
		team Team
		role TeamRoles {
			@default(TeamRoles.Member)
		}
	}

	@unique([account, team])

	@permission(
		expression: account.identity == ctx.identity
		actions: [create, update, delete]
	)

	operations {
		create addToTeam(account.email, team.id, role)
		update updateTeamRole(account.id, team.id, role)
		delete removeFromTeam(account.id, team.id)
	}
}

enum TeamRoles {
	Member
	Admin
}


model Project {
	fields {
		name Text
		team Team
		tasks Task[]
	}

	@permission(
		expression: project.team.members.accounts.identity contains ctx.identity
		actions: [create, list, delete]
	)

	operations {
		create createProject(name, team.id)
		list listProjects(team.id) 
		delete deleteProject(id)
	}
}

model Task {
	fields {
		title Text
		description Text?
		creator Account
		project Project
		completed Boolean
		completedAt Timestamp?
		assignedTo Account
		dueDate Date?
		estimate Number?
		comments Comment[]
	}

	@permission(
		expression: task.project.team.members.accounts.identity contains ctx.identity
		actions: [get, list, update, delete]
	)

	operations {
		list openTasks(project.id) {
			@where(task.completed == false)
		}
		list completedTasks(project.id, completedAt?) {
			@where(task.completed == true)
		}
		update completeTask(id) {
			@set(task.completed = true)
			@set(task.completedAt = ctx.timestamp)
		}
		update unCompleteTask(id) {
			@set(task.completed = false)
			@set(task.completedAt = null)
		}
		update assignTask(id, assignedTo.id) {
			@validate(task.assignedTo in task.project.team.members.accounts)
		}
		update updateTask(id, title, description)
		update createTasks(title, description, dueDate)
		update setEstimate(id, estimate)
		update setDueDate(id, dueDate)
		update moveTasks(id, project.id)
	}
}

model Comment {
	fields {
		task Task
		author Account
		text Text
	}

	@permission(
		expression: comment.task.team.members.accounts.identity contains ctx.identity
		actions: [create]
	)
	@permission(
		expression: comment.author.identity == ctx.identity
		actions: [update, delete]
	)

	operations {
		create createComment(task.id, text, author.id)
		update updateComment(id, text)
		delete deleteComment(id)
	}
}

api Web {
	@graphql

	models {
		Account
		Team
		TeamMember
		Project
		Task
		Comment
	}
}