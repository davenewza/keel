model Post {
    fields {
        title Text?
        views Number?
        active Boolean?
        type PostType?
        identity Identity?
        titlePermissionMatch Text @default("hello")
        viewsPermissionMatch Number @default(1)
        activePermissionMatch Boolean @default(true)
        typePermissionMatch PostType @default(PostType.Technical)
        isActive Boolean @default(true)
    }

    operations {
        create createWithText() with (title, isActive?)
        create createWithNumber() with (views, isActive?)
        create createWithBoolean() with (active, isActive?)
        create createWithEnum() with (type, isActive?)
        create createWithIdentity() with (isActive?) {
            @set(post.identity = ctx.identity)
        }
        list listWithTextPermissionLiteral(isActive) {
            @permission(expression: post.title == "hello")
        }
        list listWithNumberPermissionLiteral(isActive) {
            @permission(expression: post.views == 1)
        }
        list listWithBooleanPermissionLiteral(isActive) {
            @permission(expression: post.active == true)
        }
        list listWithEnumPermissionLiteral(isActive) {
            @permission(expression: post.type == PostType.Technical)
        }
        list listWithTextPermissionFromField(isActive) {
            @permission(expression: post.title == post.titlePermissionMatch)
        }
        list listWithNumberPermissionFromField(isActive) {
            @permission(expression: post.views == post.viewsPermissionMatch)
        }
        list listWithBooleanPermissionFromField(isActive) {
            @permission(expression: post.active == post.activePermissionMatch)
        }
        list listWithEnumPermissionFromField(isActive) {
            @permission(expression: post.type == post.typePermissionMatch)
        }
        list listWithIdentityPermission(isActive) {
            @permission(expression: post.identity == ctx.identity)
        }
        list listWithTrueValuePermission() {
            @permission(expression: true)
        }
    }

    @permission(
        expression: true,
        actions: [create]
    )
}

enum PostType {
    Technical
    Lifestyle
    Food
}

api Web {
    models {
        Post
    }
}
