import { queryResolverFromEnv, Logger } from '@teamkeel/functions-runtime';
const queryLogger = new Logger();

{{- range .Models }}
export class {{ .ApiName }} {
  constructor() {
    this.create = async (inputs) => {
      return this.db.create(inputs);
    };
    this.where = (conditions) => {
      return this.db.where(conditions);
    };
    this.delete = (id) => {
      return this.db.delete(id);
    };
    this.findOne = (query) => {
      return this.db.findOne(query);
    };
    this.update = (id, inputs) => {
      return this.db.update(id, inputs);
    };
    this.findMany = (query) => {
      return this.db.where(query).all();
    };
    this.db = new Query({
      tableName: '{{ .TableName }}',
      queryResolver: queryResolverFromEnv(process.env),
      logger: queryLogger
    });
  }
}
{{- end}}
export const api = {
  models: {
    {{- range .Models }}
    {{ .NameLowerCamel }}: new {{ .ApiName }}(),
    {{- end}}
  }
}
{{- range .Actions}}
{{- if .IsCustom }}
export const {{ .Name }} = (callback) => (inputs, api) => {
  return callback(inputs, api);
};
{{- end }}
{{- end}}