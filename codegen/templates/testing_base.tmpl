// We reuse various things from the client package for interacting with the db
import * as Client from '@teamkeel/client';
import { createPool, DatabasePool } from 'slonik';
import { createQueryLoggingInterceptor } from 'slonik-interceptor-query-logging';
import { QueryConstraints, Query, Logger, ChainableQuery } from '@teamkeel/sdk';
import * as ReturnTypes from '@teamkeel/sdk/returnTypes';
import ActionExecutor from './actionExecutor';

const cs = process.env.DB_CONN!;
const parentPort = process.env.HOST_PORT!;

const queryLogger = new Logger();

const actionExecutor = new ActionExecutor({ parentPort: parseInt(parentPort, 10), host: 'localhost' });

// Actions contains all of the Keel schema actions - both built-in actions
// defined in an *operations* block and custom operations defined in a *functions*
// block.
class ActionsWithIdentity {
  private identityId : string|undefined;

  constructor(identityId: string|undefined) {
    this.identityId = identityId;
  }

  {{ .AuthenticatedActions }}
}

export class Actions {
  withIdentity = (id: string) => {
    return new ActionsWithIdentity(id);
  } 

  {{ .UnauthenticatedActions }}
}

export const actions = new Actions();

{{ .TestingModelApis }}
