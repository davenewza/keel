type Query {
  _health: Boolean
  getBeatle: Beatle
  listBeatles(input: listBeatles_input): Beatle_connection!
}

type Mutation {
  authenticate(input: authenticate_input!): authenticate_response
  createBeatle: Beatle!
  deleteBeatle: DeleteResponse
  requestPasswordReset(input: requestPasswordReset_input!): requestPasswordReset_response
  resetPassword(input: resetPassword_input!): resetPassword_response
  switchBeatle: Beatle!
}

input EmailPassword_input {
  email: String!
  password: String!
}

input authenticate_input {
  createIfNotExists: Boolean
  emailPassword: EmailPassword_input!
}

input listBeatles_input {
  after: String
  before: String
  first: Int
  last: Int
}

input requestPasswordReset_input {
  email: String!
  redirectUrl: String!
}

input resetPassword_input {
  password: String!
  token: String!
}

type Beatle {
  code: String!
  createdAt: Timestamp!
  id: ID!
  identity: Identity
  identityId: ID
  name: String!
  updatedAt: Timestamp!
}

type Beatle_connection {
  edges: [Beatle_edge!]!
  pageInfo: PageInfo!
}

type Beatle_edge {
  node: Beatle!
}

type DeleteResponse {
  success: Boolean!
}

type Identity {
  createdAt: Timestamp!
  createdBy: String
  email: String
  externalId: String
  id: ID!
  updatedAt: Timestamp!
}

type PageInfo {
  count: Int!
  endCursor: String!
  hasNextPage: Boolean!
  startCursor: String!
  totalCount: Int!
}

type Timestamp {
  formatted(format: String!): String!
  fromNow: String!
  iso8601: String!
  seconds: Int!
}

type authenticate_response {
  identityCreated: Boolean!
  token: String!
}

type requestPasswordReset_response {
  success: Boolean
}

type resetPassword_response {
  success: Boolean
}

scalar Any

scalar ISO8601
