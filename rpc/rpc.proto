syntax = "proto3";
package rpc;

// option go_package = "apis/rpc";
import "schema.proto";
import "opentelemetry/proto/trace/v1/trace.proto";
import "google/protobuf/timestamp.proto";


message GetSchemaRequest {
	string environment_id = 1;
}

message GetSchemaResponse {
	proto.Schema schema = 1;
}

message SQLQueryInput {
	string projectID = 1;
	string environmentID = 2;
	string query = 3;
	optional bool writeMode = 4;
}

message SQLQueryResponse {
	SQLQueryStatus status = 1;
	int32 executionDuration = 2;
	string resultsJSON = 3;
	int32 totalRows = 4;
	string error = 5;
}

enum SQLQueryStatus {
	success = 0;
	failed = 1;
}

message GetTraceRequest {
	string trace_id = 1;
}

message GetTraceResponse {
	opentelemetry.proto.trace.v1.TracesData trace = 1;
}

message ListTracesRequest {
	string environment_id = 1;
	google.protobuf.Timestamp before = 2;
	google.protobuf.Timestamp after = 3;
	repeated ListTraceFilter filters = 4;
	int32 limit = 5;
	int32 offset = 6;
}

message ListTraceFilter {
	string field = 1;
	string value = 2;
}

message ListTracesResponse {
	repeated TraceItem traces = 1;
}

message TraceItem {
	string trace_id = 1;
	string environment_id = 2;
	google.protobuf.Timestamp start_time = 3;
	google.protobuf.Timestamp end_time = 4;
	bool error = 5;
	float duration_ms = 6;
	string root_name = 7;
	string project_id = 8;
	string deployment_id = 9;
	string runtime_version = 10;
}

service API {
	rpc GetActiveSchema(GetSchemaRequest) returns (GetSchemaResponse);
	rpc RunSQLQuery(SQLQueryInput) returns (SQLQueryResponse);
	rpc GetTrace(GetTraceRequest) returns (GetTraceResponse);
	rpc ListTraces(ListTracesRequest) returns (ListTracesResponse);

	// Return a list of default generated tools config for interacting with the API
	rpc ListTools(ListToolsRequest) returns (ListToolsResponse);
}

message ListToolsRequest {}
message ListToolsResponse {
	repeated ActionConfig tools = 1;
}

message Capabilities {
  	bool comments = 1;
  	bool audit = 2;
	// Export data
	// TBC more options
}

message ActionConfig {
	// Unique identifier. For generated tools, the ID will be the same as the action's name.
	string id = 1;
	
	// Sentence case the action name e.g "Get order"
	string name = 2; 
	
	// Skipped for auto generated tools
	optional string icon = 3; 

	// The action in the schema e.g "getOrder"
	string action_name = 4; 

	// The names of the APIs in which this action sits
	repeated string api_names = 5;
	
	proto.ActionType action_type = 6;
	proto.ActionImplementation implementation = 7;

	repeated RequestFieldConfig inputs = 8;
	repeated ResponseFieldConfig response = 9;

	// Title of the tool.
	// Default value: a template with the first field of the model if it's a text field,
	// otherwise empty.
	optional StringTemplate title = 10; 

	// Template language support: markdown
	optional StringTemplate help_text = 11; 

	// The name of the entity associated with this tool, in a singular form (e.g. order, user).
	// The word is lowercased; for generated tools it is the name of the model
	string entity_single = 12; 

	// The name of the entity associated with this tool, in a plural form (e.g. orders, users).
	// The word is lowercased; for generated tools it is derived from name of the model
	string entity_plural = 13; 

	// What features are enabled for this tool
	Capabilities capabilities = 14;

	// Only for List actions; aka views.
	// E.g. For a listOrders action; these would be tabs that show filtered orders by status 
	// (Processed, Pending, Completed)
	// For auto-generated configs, this is only populated for list actions, with links to other list 
	// actions for the same model.
	repeated ActionLink related_actions = 15; 

	// Only for List actions; Support offset and cursor
	optional CursorPaginationConfig pagination = 16;

	// List of extenal links that will be displayed with this tool; used only for Get actions.
	// Nothing for auto generated
	repeated ExternalLink links = 17; 
	
	// Things you can do to this entry
	// All update, deletes, creates, read and write on the same model.
	// Only for List & Get; empty for mutations 
	repeated ActionLink entry_activity_actions = 18; 
	
	// Tools that will be displayed inline (embedded) withing the one that we're defining. 
	repeated ActionLink embedded_actions = 19;

	// The action to use to get an entry on this model. Default to a get action on the same model
	// Used for: 
	// - fetching the record for prefilling a mutation
	// - the link for clicking a row in a List 
	// - the action to call after a mutation
	optional ActionLink get_entry_action = 20;
}

message RequestFieldConfig {
	// common fields
	JsonPath field_location = 1;
	proto.Type field_type = 2;
	string display_name = 3;
	int32 display_order = 4;
	bool visible = 5;
	optional StringTemplate help_text = 6;

	// For a relation field - A list action with the fewest required inputs on the target model
	// Used to display a lookup/dropdown to allow selecting a entry for this field
	optional ActionLink lookup_action = 7; 

	// For a relation field - Used for loading a preview
	optional ActionLink get_entry_action = 8;

	bool locked = 9;
	optional DefaultValue default_value = 10;
	optional StringTemplate placeholder = 11;
}

message ResponseFieldConfig {
	JsonPath field_location = 1;
	proto.Type field_type = 2;
	// default to sentence case 
	string display_name = 3;
	int32 display_order = 4;
	bool visible = 5;
	optional StringTemplate help_text = 6;

	bool sortable = 7; // Based on @sortable()

	// Set if this field is a FK and link to a get/list action on the target model
	optional ActionLink link = 8; 

	// for file fields only, display images inline
	bool image_preview = 9; 
}

message DefaultValue {
	oneof value {
		string string = 1;
		int32 integer = 2;
		float float = 3;
		bool bool = 4;
	}
}

message StringTemplate {
	// e.g. "{firstName} {lastName}" template syntax TBC.
	string template = 1;
	
	// If markdown is supported for this template. e.g. 
	// Italic text: _{{.Var}}_ 
	bool markdown = 2;
}

message JsonPath {
	string path = 1;
}

message ExternalLink {
	StringTemplate label = 1;
	StringTemplate href = 2;
	optional string icon = 3;
}

message ActionLink {
	string tool_id = 1;
	
	// The shape of this data is the input for the target action (i.e. 'where' and not 'values') but
	// with JSON paths for field values. Is a full  object tree
	// e.g. 
	// {
	// 	"where": {
	// 		"id": "$.id" // JSON path on the current action repsonse. Can be recursive
	// 	}
	// }
	repeated DataMapping data = 2;
	
	optional StringTemplate title = 3; // Empty by default
}

message CursorPaginationConfig {
	// TBD
	message FieldConfig {
		string request_input = 1;
		JsonPath response_field = 2;
	}
	message PageSizeConfig {
		string request_input = 1;
		JsonPath response_field = 2;
		int32 default_value = 3;
	}

	FieldConfig start = 1;
	FieldConfig end = 2;
	PageSizeConfig page_size = 3;
	JsonPath next_page = 4;
	JsonPath total_count = 5;
}

message DataMapping {
	string key = 1;
	optional JsonPath path = 2;
	repeated DataMapping object = 3;
}
