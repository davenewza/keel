model Post {
    fields {
        title Text?
        views Number?
        identity Identity?
    }

    operations {
        create create() with (title, views)
        create createUsingRole() with (title) {
            @permission(roles: [Poster])
        }
        get get(id)
        update update(id) with (title)
        delete delete(id)
    }

    @permission(
        expression: post.title == "hello",
        actions: [create, get, update]
    )

    @permission(
        expression: post.views == 5,
        actions: [get]
    )

    @permission(
        expression: true,
        actions: [delete]
    )
}

model ModelWithExpressions {
    fields {
        title Text?
        views Number?
        isActive Boolean?
        option Options?
    }

    operations {
        create textsFailedExpressions() with (title) {
            @permission(expression: "hello" == "goodbye")
            @permission(expression: "hello" != "hello")
        }
        create numbersFailedExpressions() with (views) {
            @permission(expression: 2 == 1)
            @permission(expression: 1 != 1)
            @permission(expression: 1 > 1)
            @permission(expression: 1 < 1)
            @permission(expression: 1 >= 2)
            @permission(expression: 2 <= 1)
        }
        create booleansFailedExpressions() with (isActive) {
            @permission(expression: true == false)
            @permission(expression: true != true)
            @permission(expression: false)
            // todo: https://linear.app/keel/issue/DEV-215/nil-ref-exception-with-createisactive-explisactive-boolean
            //@permission(expression: false != isActive)
            //@permission(expression: false != explIsActive)
        }
        create enumFailedExpressions() {
            @permission(expression: Options.One == Options.Two)
            @permission(expression: Options.One != Options.One)
            // todo: https://linear.app/keel/issue/DEV-216/enum-as-explicit-input-action-inputs-must-be-one-of-the-fields-defined
            //@permission(expression: Options.One != explOption)
        }
    }
}

enum Options {
    One
    Two
}

role Poster {
    domains {
        "times.co.uk"
    }

    emails {
        "editorFred99@agency.org"
    }
}

api Web {
    models {
        Post
    }
}

// The operation in this model has ONLY Role based permission rules - to provide test
// regression coverage for this bugfix: https://linear.app/keel/issue/RUN-179/role-based-permission-bug-fix
model Procedure {
    fields {
        name Text @unique
    }

    operations {
        get getProc(name)
        create doProcedure() with (name) {
            @permission(roles: [Surgeon])
        }
    }
}

role Surgeon {
    domains {
        "barts.org"
    }

    emails {
        "sam.brainsurgeon@gmail.com"
        "sally.heartsurgeon@gmail.com"
    }
}
