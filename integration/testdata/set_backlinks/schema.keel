model User {
    fields {
        name Text
        identity Identity {
            @unique
            @relation(user)
        }
        organisation Organisation
        isAdmin Boolean @default(false)
    }
}

model Organisation {
    fields {
        name Text
        users User[]
        isActive Boolean @default(true)
    }
}

model Record {
    fields {
        name Text
        owner User
        organisation Organisation
        isActive Boolean @default(false)
        parent Record?
        children Record[]
    }

    actions {
        create createRecord() with (name) {
            @set(record.owner = ctx.identity.user)
            @set(record.organisation.id = ctx.identity.user.organisation.id)
            @set(record.isActive = ctx.identity.user.organisation.isActive)
        }
        create createRecordWithChildren() with (name, children.name) {
            @set(record.owner = ctx.identity.user)
            @set(record.organisation.id = ctx.identity.user.organisation.id)
            @set(record.isActive = ctx.identity.user.organisation.isActive)
            @set(record.children.owner = ctx.identity.user)
            @set(record.children.organisation.id = ctx.identity.user.organisation.id)
            @set(record.children.isActive = ctx.identity.user.organisation.isActive)
        }
        create createRecordWithParent() with (name, parent.name) {
            @set(record.owner = ctx.identity.user)
            @set(record.organisation.id = ctx.identity.user.organisation.id)
            @set(record.isActive = ctx.identity.user.organisation.isActive)
            @set(record.parent.owner = ctx.identity.user)
            @set(record.parent.organisation.id = ctx.identity.user.organisation.id)
            @set(record.parent.isActive = ctx.identity.user.organisation.isActive)
        }
        update updateRecordOwner(id) {
            @set(record.owner = ctx.identity.user)
            @set(record.organisation.id = ctx.identity.user.organisation.id)
            @set(record.isActive = ctx.identity.user.organisation.isActive)
        }
    }

    @permission(
        expression: true,
        actions: [create, update]
    )
}

model UserExtension {
    fields {
        name Text
        identity1 Identity {
            @unique
            @relation(user1)
        }
        identity2 Identity {
            @unique
            @relation(user2)
        }
        user1 User
        user2 User
        email Text
        isVerified Boolean
        signedUpAt Timestamp
        issuer Text
        externalId Text
    }

    actions {
        create createExt() with (n: Text) {
            @set(userExtension.name = n)
            @set(userExtension.identity1 = ctx.identity)
            @set(userExtension.identity2.id = ctx.identity.id)
            @set(userExtension.user1 = ctx.identity.user)
            @set(userExtension.user2.id = ctx.identity.user.id)
            @set(userExtension.email = ctx.identity.email)
            @set(userExtension.isVerified = ctx.identity.emailVerified)
            @set(userExtension.signedUpAt = ctx.identity.createdAt)
            @set(userExtension.issuer = ctx.identity.issuer)
            @set(userExtension.externalId = ctx.identity.externalId)
            @permission(expression: ctx.isAuthenticated)
        }

        update updateExt(id) with (n: Text) {
            @set(userExtension.name = n)
            @set(userExtension.identity1 = ctx.identity)
            @set(userExtension.identity2.id = ctx.identity.id)
            @set(userExtension.user1 = ctx.identity.user)
            @set(userExtension.user2.id = ctx.identity.user.id)
            @set(userExtension.email = ctx.identity.email)
            @set(userExtension.isVerified = ctx.identity.emailVerified)
            @set(userExtension.signedUpAt = ctx.identity.createdAt)
            @set(userExtension.issuer = ctx.identity.issuer)
            @set(userExtension.externalId = ctx.identity.externalId)
            @permission(expression: ctx.isAuthenticated)
        }
    }
}