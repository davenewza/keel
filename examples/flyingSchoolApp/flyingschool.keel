model Account {
    fields {
        identity Identity @unique
        name Text
        email Text @unique
        accountType AccountTypes @default(AccountTypes.student)
        licenceNumber Text?
        flyHours Number?
    }

    operations {
        create createAccount() with (name,email) {
            @set(account.identity = ctx.identity)
        }
        update updateAccountFlyHours(id) with (flyHours)
    }
}

enum AccountTypes {
    Student
    Instructor
}

model Plane {
    fields {
        make Text
        model Text
        registration Text
        flyHours Number
    }

    operations {
        update updatePlaneFlyHours(id) with (flyHours)
    }
}

model Lesson {
    fields {
        date Date
        startTime Timestamp
        endTime Timestamp
        instructor Account
        student Account
        plane Plane
        status LessonStatuses @default(Booked) // Should return error as should be LessonStatuses.Booked
    }

    operations {
        create createLesson() with(date,startTime,endTime,instructor,student,plane)
        update updateLesson(id) with(date,startTime,endTime,plane)
        update cancelLesson(id) {
            @set(lesson.status = LessonStatuses.Cancelled) // That should be correct
            @permission(
                expression: (lesson.instructor.identity == ctx.identity)
            )
        }
        list myLessons() {
            @where(lesson.student.identity == ctx.identity or lesson.instructor.identity == ctx.identity)
        }
    }

    @permission(
        expression: ctx.identity == lesson.instructor.identity,
        actions: [update]
    )
}

enum LessonStatuses {
    Booked
    Cancelled
    Completed
}