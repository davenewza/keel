type Query {
  _health: Boolean
  findTaxProfile(input: FindTaxProfileInput!): TaxProfileConnection!
}

type Mutation {
  authenticate(input: AuthenticateInput!): AuthenticateResponse
  createCompany(input: CreateCompanyInput!): Company!
  requestPasswordReset(input: RequestPasswordResetInput!): RequestPasswordResetResponse
  resetPassword(input: ResetPasswordInput!): ResetPasswordResponse
}

input AuthenticateInput {
  createIfNotExists: Boolean
  emailPassword: EmailPasswordInput!
}

input CreateCompanyCompanyProfileInput {
  employeeCount: Int!
  taxProfile: CreateCompanyCompanyProfileTaxProfileInput
}

input CreateCompanyCompanyProfileTaxProfileInput {
  taxNumber: String!
}

input CreateCompanyInput {
  companyProfile: CreateCompanyCompanyProfileInput!
  name: String!
}

input EmailPasswordInput {
  email: String!
  password: String!
}

input FindTaxProfileCompanyProfileCompanyInput {
  id: IdQueryInput!
}

input FindTaxProfileCompanyProfileInput {
  company: FindTaxProfileCompanyProfileCompanyInput!
}

input FindTaxProfileInput {
  after: String
  before: String
  first: Int
  last: Int
  where: FindTaxProfileWhere!
}

input FindTaxProfileWhere {
  companyProfile: FindTaxProfileCompanyProfileInput!
}

input IdQueryInput {
  equals: ID
  notEquals: ID
  oneOf: [ID]
}

input RequestPasswordResetInput {
  email: String!
  redirectUrl: String!
}

input ResetPasswordInput {
  password: String!
  token: String!
}

type AuthenticateResponse {
  identityCreated: Boolean!
  token: String!
}

type Company {
  companyProfile: CompanyProfile!
  companyProfileId: ID!
  createdAt: Timestamp!
  id: ID!
  name: String!
  updatedAt: Timestamp!
}

type CompanyProfile {
  company: Company!
  createdAt: Timestamp!
  employeeCount: Int!
  id: ID!
  taxProfile: TaxProfile
  taxProfileId: ID
  updatedAt: Timestamp!
}

type PageInfo {
  count: Int!
  endCursor: String!
  hasNextPage: Boolean!
  startCursor: String!
  totalCount: Int!
}

type RequestPasswordResetResponse {
  success: Boolean
}

type ResetPasswordResponse {
  success: Boolean
}

type TaxProfile {
  companyProfile: CompanyProfile!
  createdAt: Timestamp!
  id: ID!
  taxNumber: String!
  updatedAt: Timestamp!
}

type TaxProfileConnection {
  edges: [TaxProfileEdge!]!
  pageInfo: PageInfo!
}

type TaxProfileEdge {
  node: TaxProfile!
}

type Timestamp {
  formatted(format: String!): String!
  fromNow: String!
  iso8601: String!
  seconds: Int!
}

scalar Any

scalar ISO8601
