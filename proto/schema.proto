syntax = "proto3";

package proto;

option go_package = "github.com/teamkeel/proto";

import "google/protobuf/wrappers.proto";

message Schema {
    repeated Model models = 1;
    repeated Role roles = 2;
}

message Model {
    // The name of the model. Must be in PascalCase and be unique within the schema.
    string name = 1;

    // The fields this model contains
    repeated Field fields = 2;

    // The operations this model defines. Contains both operations that will be auto
    // generated and also custom functions
    repeated Operation operations = 3;

    repeated PermissionRule permissions = 4;
}

message Field {
    // The name of the model this field belongs to.
    string model_name = 1;

    // The name of the field. Must be in lowerCamelCase and be unique within the model.
    string name = 2;

    // The type of the field.
    FieldType type = 3;

    // If true then this field is allowed to be null
    bool optional = 4;

    // If true then this field will have a unique constraint added to it meaning
    // a given value can only exist in a single row.
    // Cannot be true if `repeated` is true
    bool unique = 5;

    // If true then this field can contain multiple values.
    // Cannot be true if `unique` is true.
    bool repeated = 6;

    // Primary key for this field.
    bool primary_key = 7;
}

message Operation {
    // The name of the model this operation belongs to.
    string model_name = 1;

    // The name of the operation. Must be in lowerCamelCase and be unique across all operations
    // across all models within the schema. This is because in both RPC and GraphQL operations
    // are top-level and so two different models can't both define an operation with the same name.
    string name = 2;

    // The type of this operation.
    OperationType type = 3;

    // Whether this operation will be auto-generated by Keel or implemented with a custom function.
    OperationImplementation implementation = 4;

    // The inputs this operation accepts.
    repeated OperationInput inputs = 5;

    // A list of permission rules to apply to this operation
    repeated PermissionRule permissions = 6;

    // A list of assignment expression to be executed as part of this operation.
    // Only valid in `type` is OPERATION_TYPE_CREATE or OPERATION_TYPE_UPDATE
    repeated Expression set_expressions = 7;

    // A list of logical expressions to be applied to the database query being
    // executed as part of the operation.
    // Not valid if `type` is OPERATION_TYPE_CREATE
    // If there are multiple entries in this field they are AND'd.
    repeated Expression where_expressions = 8;
}

message OperationInput {
    // Name of the input. Must be lowerCamelCase and unique within the parent operation.
    string name = 1;

    // The type of this input. If type is OPERATION_INPUT_TYPE_FIELD then `model_name` and `field_name`
    // must also be populated.
    OperationInputType type = 2;

    // Set to true if this input field should accept a list of values. Only applies if `type` is not
    // set to OPERATION_INPUT_TYPE_FIELD
    bool repeated = 3;

    // Set to true if this input field is optional. Only applies if `type` is not
    // set to OPERATION_INPUT_TYPE_FIELD
    bool optional = 4;

    // The name of the model this input field is referring to. Should only be set if `type` is
    // set to OPERATION_INPUT_TYPE_FIELD
    google.protobuf.StringValue model_name = 5;

    // The name of the field inside `model_name` that this input type refers to. Should only 
    // be set if `type` is set to OPERATION_INPUT_TYPE_FIELD
    google.protobuf.StringValue field_name = 6;
}

message Role {
    // The name of the role
    string name = 1;

    // A list of domains to match for this role e.g. myorg.com
    repeated string domains = 2;

    // A list of specific email addresses to match for this role eg. sarah@myorg.com
    repeated string emails = 3;
}

message PermissionRule {
    // Name of the model this permission rule applies to
    string model_name = 1;

    // Name of the specific operation this permission rule applies to.
    // If this field is populated then `operations_types` is ignored.
    google.protobuf.StringValue operation_name = 2;

    // A name of a Role that has been defined in the schema.
    // Cannot be provided if `expression` is provided.
    string role_name = 3;

    // An expression to evaluate at runtime.
    // Cannot be provided if `role_name` is provided.
    Expression expression = 4;

    // A list of operation types that this permission rule applies to
    // Should not be set if `operation_name` is provided.
    repeated OperationType operations_types = 5;
}

message Expression {
    string source = 1;
}

enum OperationInputType {
    OPERATION_INPUT_TYPE_UNKNOWN = 0;

    // Means the input maps directly to a field on a model
    OPERATION_INPUT_TYPE_FIELD = 1;

    OPERATION_INPUT_TYPE_STRING = 2;
    OPERATION_INPUT_TYPE_BOOL = 3;
    // etc...
}

enum OperationImplementation {
    OPERATION_IMPLEMENTATION_UNKNOWN = 0;

    // Auto means the implementation of the operation is generated by Keel.
    OPERATION_IMPLEMENTATION_AUTO = 1;

    // Custom means the implementation of the operation is provided via custom code.
    // The code itself is not represented in this proto schema. 
    OPERATION_IMPLEMENTATION_CUSTOM = 2;
}

enum OperationType {
    OPERATION_TYPE_UNKNOWN = 0;
    
    // Creates a new record and returns it
    OPERATION_TYPE_CREATE = 1;

    // Returns a single record by looking up on a unique field
    OPERATION_TYPE_GET = 2;

    // Lists records optionally filtering on certain fields. The response would be a
    // an object that supports pagination functionality and contains a "page" of results.
    OPERATION_TYPE_LIST = 3;

    // Update a single record by providing a unique lookup and some fields to update.
    // The resulting record is returned.
    OPERATION_TYPE_UPDATE = 4;

    // Delete a record and returns it's ID
    OPERATION_TYPE_DELETE = 5;
}

enum FieldType {
    FIELD_TYPE_UNKNOWN = 0;
    FIELD_TYPE_STRING = 1;
    FIELD_TYPE_BOOL = 2;
    FIELD_TYPE_INT = 3;
    FIELD_TYPE_TIMESTAMP = 4;
    FIELD_TYPE_DATE = 5;
    FIELD_TYPE_ID = 6;
    FIELD_TYPE_RELATIONSHIP = 7;
    FIELD_TYPE_CURRENCY = 8;
    FIELD_TYPE_DATETIME = 9;
    FIELD_TYPE_ENUM = 10;
    FIELD_TYPE_IDENTITY = 11;
    FIELD_TYPE_IMAGE = 12;
}